=head1 Disclaimer

This is preliminary developer's documentation, incomplete and probably
inaccurate at times. Feel free to contribute.

=head1 Installing

Download the httpd-2.0 and modperl-2.0 tarballs, and extract them in the
same directory.

Or use anoncvs (password is "anoncvs"):

 % cvs -d :pserver:anoncvs@www.apache.org:/home/cvspublic login
 % cvs -d :pserver:anoncvs@www.apache.org:/home/cvspublic co modperl-2.0
 % cvs -d :pserver:anoncvs@www.apache.org:/home/cvspublic co httpd-2.0
 % cd httpd-2.0/srclib
 % cvs -d :pserver:anoncvs@www.apache.org:/home/cvspublic co apr
 % cvs -d :pserver:anoncvs@www.apache.org:/home/cvspublic co apr-util
 % cd ..
 % ./buildconf
 % ./configure --prefix=$HOME/apache-2.0 \
   --with-mpm=threaded --enable-so
 % make && make install

Once extracted, whenever you want to sync with the latest httpd-2.0
version and rebuild, run:

 % cd httpd-2.0
 % cvs up -dP
 % make distclean && ./buildconf
 % ./configure --prefix=$HOME/apache-2.0 \
   --with-mpm=threaded --enable-so
 % make && make install

For bleeding edge Perl:

 % rsync -auvz rsync://ftp.linux.activestate.com/perl-current/ perl-current
 % cd perl-current
 % ./Configure -des -Dprefix=$HOME/bleedperl \
   -Dusethreads -Doptimize='-g' -Dusedevel
 % make && make test && make install
 % ln -s $HOME/bleedperl/bin/perl5.x.x $HOME/bleedperl/bin/perl

If you are re-building Perl after rsync-ing, make sure to cleanup:

  % make distclean

before running C<./Configure>.

You'll also want to install (at least) LWP into the bleedperl/lib
directory if you want to fully test mod_perl, because normally a
privately installed bleedperl won't find libraries installed in the
normal places; it only looks in it's own lib tree. You can install LWP
with CPAN.pm shell:

 % $HOME/bleedperl/bin/perl -MCPAN -e 'install("LWP")'


=head1 Compiling

=head2 Create the build environment

  % cd modperl-2.0
  % perl Makefile.PL MP_GENERATE_XS=1 MP_USE_DSO=1 \
    MP_APXS=$apache_prefix/bin/apxs && make

I<options> an optional list of (key,value) pairs.

Boolean options: set them with MP_XXX=1.

=over 4

=item MP_PROMPT_DEFAULT

Accept default values for all would-be prompts

=item MP_GENERATE_XS

Generate xs code from parsed source headers in I<xs/tables/$httpd_version>.

=item MP_USE_DSO

Build mod_perl as a DSO

=item MP_STATIC_EXTS

Build Apache::*.xs as static extensions

=item MP_USE_GTOP

Link with libgtop and enable libgtop reporting

=item MP_DEBUG

Turn on debugging (-g -lperld) and tracing

=item MP_MAINTAINER

NOTE: apache must be build with --enable-maintainer-mode

Maintainer compile mode, turn on MP_DEBUG and add gcc flags:

 -DAP_DEBUG \
 -Wall -Wmissing-prototypes -Wstrict-prototypes -Wmissing-declarations

=item MP_TRACE

Enable tracing

=item MP_INST_APACHE2

Install *.pm relative to Apache2/ directory

=back

Non-Boolean options: set them with MP_XXX=value.

=over 4

=item MP_CCOPTS

Add to compiler flags, e.g.

 MP_CCOPTS = -Werror

=item MP_OPTIONS_FILE

Read options from given file

=back

mod_perl specific compiler options:

=over 4

=item -DMP_IOBUFSIZE

Change the default mod_perl's 8K IO buffer size, e.g. 16K:

 MP_CCOPTS=-DMP_IOBUFSIZE=16384

=back

Options can also be specified in the file I<makepl_args.mod_perl2> or
I<.makepl_args.mod_perl2>. The file can be placed under $ENV{HOME},
the root of the source package or its parent directory. So if you
unpack the mod_perl source into I</tmp/mod_perl-2.x/> and your home is
I</home/foo/>, the file will be searched in:

  /tmp/mod_perl-2.x/makepl_args.mod_perl2
  /tmp/makepl_args.mod_perl2
  /home/foo/makepl_args.mod_perl2
  /tmp/mod_perl-2.x/.makepl_args.mod_perl2
  /tmp/.makepl_args.mod_perl2
  /home/foo/.makepl_args.mod_perl2

If the file specified in C<MP_OPTIONS_FILE> is found the
I<makepl_args.mod_perl2> will be ignored.

Command line options override those from I<makepl_args.mod_perl2> and
those from C<MP_OPTIONS_FILE>.

=head2 Compile mod_perl

  % make

=head2 Configure and compile Apache

  % cd ../httpd-2.0
  % ./configure --with-mpm=threaded
  % make

=head2 Howto generate source tables

All mod_perl-2.0 xs code is generated from parsed header files.  While
in pre-release mode, a version of these tables will be checked in to
I<xs/tables/current>.  Should you wish to update these tables, here's
how:

NOTE: requires C::Scan 0.75, which at the moment is unreleased, there
is a working copy here: http://perl.apache.org/~dougm/Scan.pm

NOTE: source_scan.pl is a HEAVY process, do not be alarmed.

% perl util/source_scan.pl apxs $apache_prefix/bin/apxs

=head1 Support

Discussion of mod_perl-2.0 currently takes place on the
dev@perl.apache.org list.  Any problems/questions should be report to
that list, be sure to include the output of:

 % perl util/config.pl

which generates the output from:

=over 4

=item perl -V

=item httpd -V

=item Makefile.PL options

=back

You can also use I<util/bugreport.pl>.

If you get segmentation faults see the I<'make test' Debug> section.

=head1 'make test' Features

=head2 What Test Options are Available

Run:

  % ./t/TEST -help

to get the list of options you can use during testing

=head2 'make test' Debug

mod_perl-2.0 provides built in 'make test' debug facility. So in case
you get a core dump during make test, or just for fun, run in one shell:

  % ./t/TEST -debug

in another shell:

  % ./t/TEST -run

then the I<-debug> shell will have a (gdb) prompt, type 'where' for
stacktrace.

=head2 Running Individual Tests

Run a single test:

  % ./t/TEST protocol/echo.t

The server will be stopped if it was already running and a new one
will be started before running the I<t/protocol/echo.t> test. At the
end of the test the server will be shut down.

You can run groups of tests at once.

  % ./t/TEST modules protocol/echo.t

will run all the tests in I<t/modules/> directory, followed by
I<t/protocol/echo.t> test.

=head2 Repeating the Tests

By default when you run the test without I<-run-tests> option, the
server will be started before the testing and stopped at the end. If
during a debugging process you need to re-run tests without a need to
restart the server, you can start the server once:

  % ./t/TEST modules -start-httpd

and then run the test(s) with I<-run-tests> option many times:

  % ./t/TEST -run-tests protocol/echo

without waiting for the server to restart.

When you are done with tests shutdown the server:

  % ./t/TEST modules -stop-httpd

=head2 Verbose Testing

By default print() statements in the test script are filtered out by
C<Test::Harness>.  if you want the test to print what it does (if you
decide to debug some test) use C<-verbose> option:

 % t/TEST -verbose protocol/echo.t


=head1 mod_perl configuration directives

=head2 Installing handlers

=over 4

=item PerlChildInitHandler

=item PerlOpenLogsHandler

=item PerlPostConfigHandler

=item PerlPreConnectionHandler

=item PerlProcessConnectionHandler

=item PerlHeaderParserHandler

=item PerlAccessHandler

=item PerlAuthenHandler

=item PerlAuthzHandler

=item PerlTypeHandler

=item PerlFixupHandler

=item PerlOutputFilterHandler

=item PerlResponseHandler

=item PerlLogHandler

=item PerlPostReadRequestHandler

=item PerlTransHandler

=back

=head2 General directives

=over 4

=item PerlSwitches switches

pass switches to the Perl command line. For example, to enable
warnings:

  PerlSwitches -w

=item PerlTrace [level]

set the trace level. This directive is enabled when mod_perl is compiled with
the MP_TRACE option. C<level> is either:

  all

which sets maximum logging and debugging levels;

a combination of one or more option letters from the following list:

  d  directive processing
  f  filters
  g  Perl runtime interaction
  h  handlers
  i  interpreter pool management
  m  memory allocations
  s  perl sections

or a numeric value.

When C<level> is not specified, the tracing level will be set to the
value of the MOD_PERL_TRACE environment variable.

=back

=head2 Threaded mode directives

These directives are enabled only in a threaded mod_perl+Apache combo.

=over 4

=item PerlInterpStart

Number of Perl interpreters to start

=item PerlInterpMax

Max number of running Perl interpreters

=item PerlInterpMaxSpare

Max number of spare Perl interpreters

=item PerlInterpMinSpare

Min number of spare Perl interpreters

=item PerlInterpMaxRequests

Max number of requests per Perl interpreters

=item PerlInterpScope

Scope for which selected interpreter should be held, one of:
I<request>, I<connection>, I<handler>, I<subrequest>.

The default is I<request>.

=back

=head2 PerlOptions Directive

Enable/Disable Options.  Options include:

=over 4

=item Parent

Create a new parent Perl interpreter for the given VirtualHost
(implies Clone).

=item Clone

Give the VirtualHost its own interpreter pool.

=item Enabled

On by default, used to disable mod_perl for a given VirtualHost.

=item Perl*Handler

Disable Perl*Handlers, all compiled in handlers are enabled by default.

=item AutoLoad

Resolve Perl*Handlers at startup time, includes loading the module
from disk if not already loaded.

=item GlobalRequest

Setup the global request_rec for use with Apache->request

=item ParseHeaders

Scan output for HTTP headers, same functionality as 1.x's
PerlSendHeaders, but more robust.

=item MergeHandlers

Turn on merging of Perl*Handler arrays, example:

 PerlFixupHandler One::fixup

 <Location /foo>
    PerlFixupHandler Another::fixup
 </Location>

By default, a request for /foo only runs B<Another::fixup> (1.x behavior)
I<PerlOptions +MergeHandlers> (inside Location /foo) will run both
B<One::fixup> and B<Another::fixup>.

=back

Examples:

 #disable mod_perl for this host
 <VirtualHost ...>
 PerlOptions -Enable
 </VirtualHost>

 #create 2 Parent Perls,
 #each pointing to a different developer library tree
 <VirtualHost ...>
  ServerName dev1
  PerlOptions +Parent
  PerlSwitches -Mblib=/home/dev1/lib/perl
 </VirtualHost>

 <VirtualHost ...>
  ServerName dev2
  PerlOptions +Parent
  PerlSwitches -Mblib=/home/dev2/lib/perl
 </VirtualHost>

 #give VirtualHost its own interpreter pool
 <VirtualHost ...>
  PerlOptions +Clone
  PerlInterpStart 2
  PerlInterpMax 2
 </VirtualHost>

 #disable handlers
 <VirtualHost ...>
  PerlOptions -Authen -Authz -Access
 </VirtualHost>

=head1 Debug notes

=head2 Setting gdb breakpoints with mod_perl built as DSO

If mod_perl is built as a DSO module, you cannot set the breakpoint in
the mod_perl source files when the I<httpd> program gets loaded into
the debugger. The reason is simple: At this moment I<httpd> has no
idea about mod_perl module yet. After the configuration file is
processed and the mod_perl DSO module is loaded then the breakpoints
in the source of mod_perl itself can be set.

The trick is to break at I<apr_dso_load>, let it load
I<libmodperl.so>, then you can set breakpoints anywhere in the modperl
code:

  % gdb httpd
  (gdb) b apr_dso_load
  (gdb) run -DONE_PROCESS
  [New Thread 1024 (LWP 1600)]
  [Switching to Thread 1024 (LWP 1600)]

  Breakpoint 1, apr_dso_load (res_handle=0xbfffb48c, path=0x811adcc
    "/home/stas/apache.org/modperl-perlmodule/src/modules/perl/libmodperl.so",
    pool=0x80e1a3c) at dso.c:138
  141         void *os_handle = dlopen(path, RTLD_NOW | RTLD_GLOBAL);
  (gdb) finish
  ...
  Value returned is $1 = 0
  (gdb) b modperl_hook_init
  (gdb) continue

This example shows how to set a breakpoint at I<modperl_hook_init>.

To automate things you can put those in the I<.gdb-jump-to-init> file:

  b apr_dso_load
  run -DONE_PROCESS -d /home/stas/apache.org/modperl-perlmodule/t \
  -f /home/stas/apache.org/modperl-perlmodule/t/conf/httpd.conf
  finish
  b modperl_hook_init
  continue

and then start the debugger with:

  % gdb /home/stas/httpd-2.0/bin/httpd -command \
  /home/stas/apache.org/modperl-perlmodule/t/.gdb-jump-to-init


=head1 Notes for Developers

If you develop some parts of the mod_perl core you may find these usefull:

=over

=item *

Apache source code cross-reference (LXR):
http://lxr.webperf.org/

=item *

Apache source code through Doxygen documentation system:

http://docx.webperf.org/


=item *



=back




=head1 Submitting Patches

If you submit patches the I<Porting/patching.pod> manpage can be very
useful. You can find it I<perl-5.7.0/Porting/patching.pod> or similar
or read it online at
http://sunsite.ualberta.ca/Documentation/Misc/perl-5.6.1/Porting/patching.html
.

Note that we prefer the patches inlined into an email. This makes
easier to comment on them.

=cut

