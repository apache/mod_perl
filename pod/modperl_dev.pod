=head1 Disclaimer

This is preliminary developer's documentation, incomplete and probably
inaccurate at times. Feel free to contribute.

=head1 Installing

Download the httpd-2.0 and modperl-2.0 tarballs, and extract them in the
same directory.

Or use anoncvs (password is "anoncvs"):

 % cvs -d :pserver:anoncvs@cvs.apache.org:/home/cvspublic login
 % cvs -d :pserver:anoncvs@cvs.apache.org:/home/cvspublic co modperl-2.0
 % cvs -d :pserver:anoncvs@cvs.apache.org:/home/cvspublic co httpd-2.0
 % cd httpd-2.0/srclib
 % cvs -d :pserver:anoncvs@cvs.apache.org:/home/cvspublic co apr
 % cvs -d :pserver:anoncvs@cvs.apache.org:/home/cvspublic co apr-util
 % cd ..
 % ./buildconf
 % ./configure --prefix=$HOME/apache-2.0 --with-mpm=prefork
 % make && make install

Once extracted, whenever you want to sync with the latest httpd-2.0
version and rebuild, run:

 % cd httpd-2.0
 % cvs up -dP
 % make distclean && ./buildconf
 % ./configure --prefix=$HOME/apache-2.0 --with-mpm=prefork
 % make && make install

For bleeding edge Perl:

 # (--delete to ensure a clean state)
 % rsync -acvz --delete --force \
   rsync://ftp.linux.activestate.com/perl-current/ perl-current
 % cd perl-current
 % ./Configure -des -Dprefix=$HOME/bleedperl \
   -Dusethreads -Doptimize='-g' -Dusedevel
 % make && make test && make install
 % ln -s $HOME/bleedperl/bin/perl5.x.x $HOME/bleedperl/bin/perl

or otherwise make sure that your perl was built with threads enabled if
you want to use a threaded MPM.

If you are re-building Perl after rsync-ing, make sure to cleanup:

  % make distclean

before running C<./Configure>.

You'll also want to install (at least) LWP into the bleedperl/lib
directory if you want to fully test mod_perl, because normally a
privately installed bleedperl won't find libraries installed in the
normal places; it only looks in it's own lib tree. You can install LWP
with CPAN.pm shell:

 % $HOME/bleedperl/bin/perl -MCPAN -e 'install("LWP")'


=head1 Compiling

=head2 Create the build environment

  % cd modperl-2.0
  % perl Makefile.PL MP_APXS=$apache_prefix/bin/apxs && make

I<options> an optional list of (key,value) pairs.

Boolean options: set them with MP_XXX=1.

=over 4

=item MP_PROMPT_DEFAULT

Accept default values for all would-be prompts

=item MP_GENERATE_XS

Generate xs code from parsed source headers in I<xs/tables/$httpd_version>.
Default is 1, set to 0 to disable.

=item MP_USE_DSO

Build mod_perl as a DSO (default)

=item MP_APXS

Path to apxs

=item MP_AP_PREFIX

Apache installation prefix
(can be used to derive apxs values on platforms where apxs is not supported)

=item MP_USE_STATIC

Build mod_perl static

=item MP_STATIC_EXTS

Build Apache::*.xs as static extensions

=item MP_USE_GTOP

Link with libgtop and enable libgtop reporting

=item MP_DEBUG

Turn on debugging (-g -lperld) and tracing

=item MP_MAINTAINER

NOTE: apache must be build with --enable-maintainer-mode

Maintainer compile mode, turn on MP_DEBUG and add gcc flags:

 -DAP_DEBUG \
 -Wall -Wmissing-prototypes -Wstrict-prototypes -Wmissing-declarations

=item MP_TRACE

Enable tracing

=item MP_INST_APACHE2

Install *.pm relative to Apache2/ directory

=back

Non-Boolean options: set them with MP_XXX=value.

=over 4

=item MP_CCOPTS

Add to compiler flags, e.g.

 MP_CCOPTS=-Werror

(Notice that C<-Werror> will work only with the Perl version 5.007 and
higher.)

=item MP_OPTIONS_FILE

Read options from given file

=back

mod_perl specific compiler options:

=over 4

=item -DMP_IOBUFSIZE

Change the default mod_perl's 8K IO buffer size, e.g. 16K:

 MP_CCOPTS=-DMP_IOBUFSIZE=16384

=back

Options can also be specified in the file I<makepl_args.mod_perl2> or
I<.makepl_args.mod_perl2>. The file can be placed under $ENV{HOME},
the root of the source package or its parent directory. So if you
unpack the mod_perl source into I</tmp/mod_perl-2.x/> and your home is
I</home/foo/>, the file will be searched in:

  /tmp/mod_perl-2.x/makepl_args.mod_perl2
  /tmp/makepl_args.mod_perl2
  /home/foo/makepl_args.mod_perl2
  /tmp/mod_perl-2.x/.makepl_args.mod_perl2
  /tmp/.makepl_args.mod_perl2
  /home/foo/.makepl_args.mod_perl2

If the file specified in C<MP_OPTIONS_FILE> is found the
I<makepl_args.mod_perl2> will be ignored.

Command line options override those from I<makepl_args.mod_perl2> and
those from C<MP_OPTIONS_FILE>.

=head2 Compile mod_perl

  % make

=head2 Configure and compile Apache

  % cd ../httpd-2.0
  % ./configure --with-mpm=prefork
  % make

=head2 Howto generate source tables

All mod_perl-2.0 xs code is generated from parsed header files.  While
in pre-release mode, a version of these tables will be checked in to
I<xs/tables/current>.  Should you wish to update these tables, here's
how:

NOTE: requires C::Scan 0.75, which at the moment is unreleased, there
is a working copy here: http://perl.apache.org/~dougm/Scan.pm

NOTE: source_scan.pl is a HEAVY process, do not be alarmed.

% perl build/source_scan.pl apxs $apache_prefix/bin/apxs


=head1 'make test' Features

L<../writing_tests/writing_tests.pod> document covers the C<make test>
suite.

=head1 mod_perl configuration directives

=head2 Installing handlers

=over 4

=item PerlChildInitHandler

=item PerlOpenLogsHandler

=item PerlPostConfigHandler

=item PerlPreConnectionHandler

=item PerlProcessConnectionHandler

=item PerlHeaderParserHandler

=item PerlAccessHandler

=item PerlAuthenHandler

=item PerlAuthzHandler

=item PerlTypeHandler

=item PerlFixupHandler

=item PerlOutputFilterHandler

=item PerlResponseHandler

=item PerlLogHandler

=item PerlPostReadRequestHandler

=item PerlInitHandler

=item PerlTransHandler

=back

=head2 General directives

=over 4

=item PerlSwitches switches

pass switches to the Perl command line. For example, to enable
warnings:

  PerlSwitches -w

=item PerlTrace [level]

set the trace level. This directive is enabled when mod_perl is compiled with
the MP_TRACE option. C<level> is either:

  all

which sets maximum logging and debugging levels;

a combination of one or more option letters (or option numerical
equivalents) from the following list:

  d (  1) directive processing
  f (  2) filters
  g (  4) Perl runtime interaction
  h (  8) handlers
  i ( 16) interpreter pool management
  m ( 32) memory allocations
  s ( 64) perl sections
  t (128) benchmark-ish timings

When C<level> is not specified, the tracing level will be set to the
value of the MOD_PERL_TRACE environment variable.

=back

=head2 Threaded mode directives

These directives are enabled only in a threaded mod_perl+Apache combo.

=over 4

=item PerlInterpStart

Number of Perl interpreters to start

=item PerlInterpMax

Max number of running Perl interpreters

=item PerlInterpMaxSpare

Max number of spare Perl interpreters

=item PerlInterpMinSpare

Min number of spare Perl interpreters

=item PerlInterpMaxRequests

Max number of requests per Perl interpreters

=item PerlInterpScope

Scope for which selected interpreter should be held, one of:
I<request>, I<connection>, I<handler>, I<subrequest>.

The default is I<request>.

=back

=head2 PerlOptions Directive

Enable/Disable Options.  Options include:

=over 4

=item Parent

Create a new parent Perl interpreter for the given VirtualHost and
give it its own interpreter pool (implies Clone).

=item Clone

Share the parent Perl interpreter, but give the VirtualHost its own
interpreter pool.

Use:

  PerlSwitches +inherit

to inherit base Perl interpreter's C<PerlSwitches>.

=item Enable

On by default, used to disable mod_perl for a given VirtualHost.

=item Perl*Handler

Disable Perl*Handlers, all compiled in handlers are enabled by default.

=item AutoLoad

Resolve Perl*Handlers at startup time, includes loading the module
from disk if not already loaded.

=item GlobalRequest

Setup the global request_rec for use with Apache->request

=item ParseHeaders

Scan output for HTTP headers, same functionality as 1.x's
PerlSendHeaders, but more robust.

=item MergeHandlers

Turn on merging of Perl*Handler arrays, example:

 PerlFixupHandler One::fixup

 <Location /foo>
    PerlFixupHandler Another::fixup
 </Location>

By default, a request for /foo only runs B<Another::fixup> (1.x behavior)
I<PerlOptions +MergeHandlers> (inside Location /foo) will run both
B<One::fixup> and B<Another::fixup>.

=back

Examples:

 #disable mod_perl for this host
 <VirtualHost ...>
 PerlOptions -Enable
 </VirtualHost>

 #create 2 Parent Perls,
 #each pointing to a different developer library tree
 <VirtualHost ...>
  ServerName dev1
  PerlOptions +Parent
  PerlSwitches -Mblib=/home/dev1/lib/perl
 </VirtualHost>

 <VirtualHost ...>
  ServerName dev2
  PerlOptions +Parent
  PerlSwitches -Mblib=/home/dev2/lib/perl
 </VirtualHost>

 #give VirtualHost its own interpreter pool
 <VirtualHost ...>
  PerlOptions +Clone
  PerlInterpStart 2
  PerlInterpMax 2
 </VirtualHost>

 #disable handlers
 <VirtualHost ...>
  PerlOptions -Authen -Authz -Access
 </VirtualHost>

=head1 Debug notes

=head2 Setting gdb breakpoints with mod_perl built as DSO

If mod_perl is built as a DSO module, you cannot set the breakpoint in
the mod_perl source files when the I<httpd> program gets loaded into
the debugger. The reason is simple: At this moment I<httpd> has no
idea about mod_perl module yet. After the configuration file is
processed and the mod_perl DSO module is loaded then the breakpoints
in the source of mod_perl itself can be set.

The trick is to break at I<apr_dso_load>, let it load
I<libmodperl.so>, then you can set breakpoints anywhere in the modperl
code:

  % gdb httpd
  (gdb) b apr_dso_load
  (gdb) run -DONE_PROCESS
  [New Thread 1024 (LWP 1600)]
  [Switching to Thread 1024 (LWP 1600)]

  Breakpoint 1, apr_dso_load (res_handle=0xbfffb48c, path=0x811adcc
    "/home/stas/apache.org/modperl-perlmodule/src/modules/perl/libmodperl.so",
    pool=0x80e1a3c) at dso.c:138
  141         void *os_handle = dlopen(path, RTLD_NOW | RTLD_GLOBAL);
  (gdb) finish
  ...
  Value returned is $1 = 0
  (gdb) b modperl_hook_init
  (gdb) continue

This example shows how to set a breakpoint at I<modperl_hook_init>.

To automate things you can put those in the I<.gdb-jump-to-init> file:

  b apr_dso_load
  run -DONE_PROCESS -d /home/stas/apache.org/modperl-perlmodule/t \
  -f /home/stas/apache.org/modperl-perlmodule/t/conf/httpd.conf
  finish
  b modperl_hook_init
  continue

and then start the debugger with:

  % gdb /home/stas/httpd-2.0/bin/httpd -command \
  /home/stas/apache.org/modperl-perlmodule/t/.gdb-jump-to-init

=head2 Starting the Server Fast under gdb

When the server is started under gdb, it first loads the symbol tables
of the dynamic libraries that it sees going to be used. Some versions
of gdb may take ages to complete this task, which makes the debugging
very irritating if you have to restart the server all the time and it
doesn't happen immediately.

The trick is to set the C<auto-solib-add> flag to 0:

  set auto-solib-add 0

in I<~/.gdbinit> file.

With this setting in effect, you can load only the needed dynamic
libraries with I<sharedlibrary> command. Remember that in order to set
a breakpoint and step through the code inside a certain dynamic
library you have to load it first. For example consider this gdb
commands file:

  .gdb-commands
  ------------
  file ~/httpd/prefork/bin/httpd
  handle SIGPIPE pass
  handle SIGPIPE nostop
  set auto-solib-add 0
  b ap_run_pre_config
  run -DONE_PROCESS -d `pwd`/t -f `pwd`/t/conf/httpd.conf \
  -DAPACHE2 -DPERL_USEITHREADS
  sharedlibrary modperl
  b modperl_hook_init
  # start: modperl_hook_init
  continue
  # restart: ap_run_pre_config
  continue
  # restart: modperl_hook_init
  continue
  b apr_poll
  continue
  
  # load APR/PerlIO/PerlIO.so
  sharedlibrary PerlIO
  b PerlIOAPR_open

which can be used as:

  % gdb -command=.gdb-commands

This script stops in I<modperl_hook_init()>, so you can step through
the mod_perl startup. We had to use the I<ap_run_pre_config> so we can
load the I<libmodperl.so> library as explained earlier. Since httpd
restarts on the start, we have to I<continue> until we hit
I<modperl_hook_init> second time, where we can set the breakpoint at
I<apr_poll>, the very point where httpd polls for new request and run
again I<continue> so it'll stop at I<apr_poll>.

When gdb stops at the function I<apr_poll> it's a time to start the
client:

  % t/TEST -run

But before that if we want to debug the server response we need to set
breakpoints in the libraries we want to debug. For example if we want
to debug the function C<PerlIOAPR_open> which resides in
I<APR/PerlIO/PerlIO.so> we first load it and then we can set a
breakpoint in it. Notice that gdb may not be able to load a library if
it wasn't referenced by any of the code. In this case we have to
require this library at the server startup. In our example we load:

  PerlModule APR::PerlIO

in I<httpd.conf>. To check which libraries' symbol tables can be
loaded in gdb, run (when the server has been started):

  gdb> info sharedlibrary

which will also show which libraries were loaded already.

Also notice that you don't have to type the full path of the library
when trying to load them, even a partial name will suffice. In our
commands file example we have used C<sharedlibrary modperl> instead of
saying C<sharedlibrary libmodperl.so>.

If you want to set breakpoints and step through the code in the Perl
and APR core libraries you should load their appropriate libraries:

  gdb> sharedlibrary libperl
  gdb> sharedlibrary libapr
  gdb> sharedlibrary libaprutil

Setting I<auto-solib-add> to 0 makes the debugging process unusual,
since originally gdb was loading the dynamic libraries automatically,
whereas now it doesn't. This is the price one has to pay to get the
debugger starting the program very fast. Hopefully the future versions
of gdb will improve.

Just remember that if you try to I<step-in> and debugger doesn't do
anything, that means that the library the function is located in
wasn't loaded. The solution is to create a commands file as explained
in the beginning of this section and craft the startup script the way
you need to avoid extra typing and mistakes when repeating the same
debugging process again and again.

=head1 Notes for Developers

If you develop some parts of the mod_perl core you may find these usefull:

=over

=item *

Apache source code cross-reference (LXR):
http://lxr.webperf.org/

=item *

Apache source code through Doxygen documentation system:

http://docx.webperf.org/


=item *



=back


=head1 mod_perl 1.x Compatibility

C<Apache::compat> provides mod_perl 1.x compatibility feature, which
allows C<Apache::Registry> from mod_perl 1.x to be used:

  startup.pl:
  -----------
  use Apache::compat ();
  use lib ...; #or something to find 1.xx Apache::Registry

then in I<httpd.conf>:

  Alias /perl /path/to/perl/scripts
  <Location /perl>
     Options +ExecCGI
     SetHandler modperl
     PerlResponseHandler Apache::Registry
  </Location>

Notice that C<Apache::compat> has to be loaded before C<CGI.pm> if the
latter module is used.

=head1 Submitting Patches

If you submit patches the I<Porting/patching.pod> manpage can be very
useful. You can find it I<perl-5.7.0/Porting/patching.pod> or similar
or read it online at
http://sunsite.ualberta.ca/Documentation/Misc/perl-5.6.1/Porting/patching.html
.

Note that we prefer the patches inlined into an email. This makes
easier to comment on them.

=cut

