Th ROADMAP document covers mod_perl 2.0 features that weren't
implemented yet and tries to provide the details and pointers on how
to implement them.

Whereas the parallel STATUS document mostly covers issues with
features that were implemented but have bugs.

META: there is also the todo/ dir...

### WrapXS ###

  o source_scan won't create Wrap/Foo/Bar.xs if
    xs/maps/modperl_functions.map defines only a boot section:
    MODULE=APR::IO PACKAGE=APR::IO BOOT=1 
    unless there is at least one function added to the .map file
    http://marc.theaimsgroup.com/?l=apache-modperl-dev&m=100702825506778&w=2

### Installation ###

 o Currently only MP_USE_DSO=1 is used, need to test that
   MP_USE_STATIC=1 works too.

### Testing ###

### Configuration ###

* Set/Add config overlapping which is not doing the right thing. See:
  http://marc.theaimsgroup.com/?t=97984528900002&r=1&w=2

### Documentation ###

* need to autogenerate and perlify API manpages

### RunTime ###


- API

  o sync apr_ and ap_ API with mp2 API


- Hooks

  o hooks ordering is not implemented yet

- Apache::Request

  o everybody wants it. There is a ported C version, but the perl glue
    code won't be written until we know where the C version
    goes. Currently it's a patch for the httpd-2.0 rep, but wasn't yet
    accepted by httpd :( The patch is here http://www.apache.org/~joes/

- Registry modules

  o An open issue with chdir, which is process-scoped. Arthur Bergman
    has started the work on ex::threads::safecwd, which is discussed
    here: http://www.perl.com/pub/a/2002/06/11/threads.html?page=2

  o other less critical open issues are listed in
    ModPerl-Registry/TODO

- Resource limiting tools:

  o Need to port tools that restrict the memory size used by processes
    for prefork mpms and develop new ones for threaded mpms. Need to
    work out the details of the implementation of the garbage
    collection thread for the threaded mpms as originally suggested by
    doug.  The issue with threads is that there is no way to know the
    thread's size, can we use B::Size and B::TerseSize?

    prefork:
        Apache::SizeLimit (???)
        Apache::GTopLimit (???)
    threaded:
        Garbage Collector thread

  => Ideally the tools should work transparently with threaded and
  non-threaded mpms, but how?

  o Other resources, 
    Apache::Resource ???


- Monitoring tools:

  Apache::VMonitor (depends on Apache::Scoreboard, considering to
  rewrite it using TT2)

  Apache::Scoreboard (ported, awaiting ModPerl::MM support)

  Apache::Peek (ported, awaiting ModPerl::MM support)