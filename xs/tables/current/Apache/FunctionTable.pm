package Apache::FunctionTable;

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# ! WARNING: generated by Apache::ParseSource/0.02
# !          Mon Apr 23 18:32:09 2001
# !          do NOT edit, any changes will be lost !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

$Apache::FunctionTable = [
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'statcode',
        'type' => 'apr_status_t'
      },
      {
        'name' => 'buf',
        'type' => 'char *'
      },
      {
        'name' => 'bufsize',
        'type' => 'apr_size_t'
      }
    ],
    'name' => 'apr_strerror'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'globalp',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_pool_alloc_init'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'globalp',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_pool_alloc_term'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'newcont',
        'type' => 'apr_pool_t **'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_pool_create'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'data',
        'type' => 'const void *'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      },
      {
        'name' => 'arg2',
        'type' => 'apr_status_t (*cleanup)(void *)'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_pool_userdata_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'data',
        'type' => 'void **'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_pool_userdata_get'
  },
  {
    'return_type' => 'apr_pool_t *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'arg1',
        'type' => 'int (*apr_abort)(int retcode)'
      }
    ],
    'name' => 'apr_pool_sub_make'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_pool_clear'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_pool_destroy'
  },
  {
    'return_type' => 'apr_size_t',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_pool_num_bytes'
  },
  {
    'return_type' => 'apr_size_t',
    'args' => [],
    'name' => 'apr_pool_free_blocks_num_bytes'
  },
  {
    'return_type' => 'void *',
    'args' => [
      {
        'name' => 'c',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'reqsize',
        'type' => 'apr_size_t'
      }
    ],
    'name' => 'apr_palloc'
  },
  {
    'return_type' => 'void *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'size',
        'type' => 'apr_size_t'
      }
    ],
    'name' => 'apr_pcalloc'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'data',
        'type' => 'const void *'
      },
      {
        'name' => 'arg2',
        'type' => 'apr_status_t (*plain_cleanup)(void *)'
      },
      {
        'name' => 'arg3',
        'type' => 'apr_status_t (*child_cleanup)(void *)'
      }
    ],
    'name' => 'apr_pool_cleanup_register'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'data',
        'type' => 'const void *'
      },
      {
        'name' => 'arg2',
        'type' => 'apr_status_t (*cleanup)(void *)'
      }
    ],
    'name' => 'apr_pool_cleanup_kill'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'data',
        'type' => 'void *'
      },
      {
        'name' => 'arg2',
        'type' => 'apr_status_t (*cleanup)(void *)'
      }
    ],
    'name' => 'apr_pool_cleanup_run'
  },
  {
    'return_type' => 'void',
    'args' => [],
    'name' => 'apr_pool_cleanup_for_exec'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'data',
        'type' => 'void *'
      }
    ],
    'name' => 'apr_pool_cleanup_null'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'res_handle',
        'type' => 'apr_dso_handle_t **'
      },
      {
        'name' => 'path',
        'type' => 'const char *'
      },
      {
        'name' => 'ctx',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_dso_load'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'handle',
        'type' => 'apr_dso_handle_t *'
      }
    ],
    'name' => 'apr_dso_unload'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'ressym',
        'type' => 'apr_dso_handle_sym_t *'
      },
      {
        'name' => 'handle',
        'type' => 'apr_dso_handle_t *'
      },
      {
        'name' => 'symname',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_dso_sym'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'dso',
        'type' => 'apr_dso_handle_t *'
      },
      {
        'name' => 'buf',
        'type' => 'char *'
      },
      {
        'name' => 'bufsize',
        'type' => 'apr_size_t'
      }
    ],
    'name' => 'apr_dso_error'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'username',
        'type' => 'char **'
      },
      {
        'name' => 'userid',
        'type' => 'apr_uid_t'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_get_username'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'userid',
        'type' => 'apr_uid_t *'
      },
      {
        'name' => 'groupid',
        'type' => 'apr_gid_t *'
      },
      {
        'name' => 'username',
        'type' => 'const char *'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_get_userid'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'dirname',
        'type' => 'char **'
      },
      {
        'name' => 'username',
        'type' => 'const char *'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_get_home_directory'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'groupname',
        'type' => 'char **'
      },
      {
        'name' => 'groupid',
        'type' => 'apr_gid_t'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_get_groupname'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'passwd',
        'type' => 'char **'
      },
      {
        'name' => 'username',
        'type' => 'const char *'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_get_user_passwd'
  },
  {
    'return_type' => 'apr_time_t',
    'args' => [],
    'name' => 'apr_time_now'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'result',
        'type' => 'apr_time_t *'
      },
      {
        'name' => 'input',
        'type' => 'time_t'
      }
    ],
    'name' => 'apr_ansi_time_to_apr_time'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'result',
        'type' => 'apr_exploded_time_t *'
      },
      {
        'name' => 'input',
        'type' => 'apr_time_t'
      },
      {
        'name' => 'offs',
        'type' => 'apr_int32_t'
      }
    ],
    'name' => 'apr_explode_time'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'result',
        'type' => 'apr_exploded_time_t *'
      },
      {
        'name' => 'input',
        'type' => 'apr_time_t'
      }
    ],
    'name' => 'apr_explode_gmt'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'result',
        'type' => 'apr_exploded_time_t *'
      },
      {
        'name' => 'input',
        'type' => 'apr_time_t'
      }
    ],
    'name' => 'apr_explode_localtime'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'result',
        'type' => 'apr_time_t *'
      },
      {
        'name' => 'input',
        'type' => 'apr_exploded_time_t *'
      }
    ],
    'name' => 'apr_implode_time'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 't',
        'type' => 'apr_interval_time_t'
      }
    ],
    'name' => 'apr_sleep'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'date_str',
        'type' => 'char *'
      },
      {
        'name' => 't',
        'type' => 'apr_time_t'
      }
    ],
    'name' => 'apr_rfc822_date'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'date_str',
        'type' => 'char *'
      },
      {
        'name' => 't',
        'type' => 'apr_time_t'
      }
    ],
    'name' => 'apr_ctime'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 's',
        'type' => 'char *'
      },
      {
        'name' => 'retsize',
        'type' => 'apr_size_t *'
      },
      {
        'name' => 'max',
        'type' => 'apr_size_t'
      },
      {
        'name' => 'format',
        'type' => 'const char *'
      },
      {
        'name' => 'tm',
        'type' => 'apr_exploded_time_t *'
      }
    ],
    'name' => 'apr_strftime'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'finfo',
        'type' => 'apr_finfo_t *'
      },
      {
        'name' => 'fname',
        'type' => 'const char *'
      },
      {
        'name' => 'wanted',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_stat'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'finfo',
        'type' => 'apr_finfo_t *'
      },
      {
        'name' => 'fname',
        'type' => 'const char *'
      },
      {
        'name' => 'wanted',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_lstat'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'new_dir',
        'type' => 'apr_dir_t **'
      },
      {
        'name' => 'dirname',
        'type' => 'const char *'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_dir_open'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thedir',
        'type' => 'apr_dir_t *'
      }
    ],
    'name' => 'apr_dir_close'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'finfo',
        'type' => 'apr_finfo_t *'
      },
      {
        'name' => 'wanted',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'thedir',
        'type' => 'apr_dir_t *'
      }
    ],
    'name' => 'apr_dir_read'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thedir',
        'type' => 'apr_dir_t *'
      }
    ],
    'name' => 'apr_dir_rewind'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'rootpath',
        'type' => 'const char **'
      },
      {
        'name' => 'filepath',
        'type' => 'const char **'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_filepath_root'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'newpath',
        'type' => 'char **'
      },
      {
        'name' => 'rootpath',
        'type' => 'const char *'
      },
      {
        'name' => 'addpath',
        'type' => 'const char *'
      },
      {
        'name' => 'flags',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_filepath_merge'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'path',
        'type' => 'char **'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_filepath_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'path',
        'type' => 'const char *'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_filepath_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'new_file',
        'type' => 'apr_file_t **'
      },
      {
        'name' => 'fname',
        'type' => 'const char *'
      },
      {
        'name' => 'flag',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'perm',
        'type' => 'apr_fileperms_t'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_file_open'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'file',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'apr_file_close'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'path',
        'type' => 'const char *'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_file_remove'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'from_path',
        'type' => 'const char *'
      },
      {
        'name' => 'to_path',
        'type' => 'const char *'
      },
      {
        'name' => 'pool',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_file_rename'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'fptr',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'apr_file_eof'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thefile',
        'type' => 'apr_file_t **'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_file_open_stderr'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thefile',
        'type' => 'apr_file_t **'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_file_open_stdout'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thefile',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'buf',
        'type' => 'void *'
      },
      {
        'name' => 'nbytes',
        'type' => 'apr_size_t *'
      }
    ],
    'name' => 'apr_file_read'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thefile',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'buf',
        'type' => 'const void *'
      },
      {
        'name' => 'nbytes',
        'type' => 'apr_size_t *'
      }
    ],
    'name' => 'apr_file_write'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thefile',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'vec',
        'type' => 'const struct iovec *'
      },
      {
        'name' => 'nvec',
        'type' => 'apr_size_t'
      },
      {
        'name' => 'nbytes',
        'type' => 'apr_size_t *'
      }
    ],
    'name' => 'apr_file_writev'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thefile',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'buf',
        'type' => 'void *'
      },
      {
        'name' => 'nbytes',
        'type' => 'apr_size_t'
      },
      {
        'name' => 'bytes_read',
        'type' => 'apr_size_t *'
      }
    ],
    'name' => 'apr_file_read_full'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thefile',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'buf',
        'type' => 'const void *'
      },
      {
        'name' => 'nbytes',
        'type' => 'apr_size_t'
      },
      {
        'name' => 'bytes_written',
        'type' => 'apr_size_t *'
      }
    ],
    'name' => 'apr_file_write_full'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'ch',
        'type' => 'char'
      },
      {
        'name' => 'thefile',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'apr_file_putc'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'ch',
        'type' => 'char *'
      },
      {
        'name' => 'thefile',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'apr_file_getc'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'ch',
        'type' => 'char'
      },
      {
        'name' => 'thefile',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'apr_file_ungetc'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'str',
        'type' => 'char *'
      },
      {
        'name' => 'len',
        'type' => 'int'
      },
      {
        'name' => 'thefile',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'apr_file_gets'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'str',
        'type' => 'const char *'
      },
      {
        'name' => 'thefile',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'apr_file_puts'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thefile',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'apr_file_flush'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'new_file',
        'type' => 'apr_file_t **'
      },
      {
        'name' => 'old_file',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_file_dup'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thefile',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'where',
        'type' => 'apr_seek_where_t'
      },
      {
        'name' => 'offset',
        'type' => 'apr_off_t *'
      }
    ],
    'name' => 'apr_file_seek'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'in',
        'type' => 'apr_file_t **'
      },
      {
        'name' => 'out',
        'type' => 'apr_file_t **'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_file_pipe_create'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'filename',
        'type' => 'const char *'
      },
      {
        'name' => 'perm',
        'type' => 'apr_fileperms_t'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_file_namedpipe_create'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thepipe',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'timeout',
        'type' => 'apr_interval_time_t *'
      }
    ],
    'name' => 'apr_file_pipe_timeout_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thepipe',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'timeout',
        'type' => 'apr_interval_time_t'
      }
    ],
    'name' => 'apr_file_pipe_timeout_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thefile',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'type',
        'type' => 'int'
      }
    ],
    'name' => 'apr_file_lock'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thefile',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'apr_file_unlock'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'new_path',
        'type' => 'const char **'
      },
      {
        'name' => 'thefile',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'apr_file_name_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'data',
        'type' => 'void **'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      },
      {
        'name' => 'file',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'apr_file_data_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'file',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'data',
        'type' => 'void *'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      },
      {
        'name' => 'arg3',
        'type' => 'apr_status_t (*cleanup)(void *)'
      }
    ],
    'name' => 'apr_file_data_set'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'fptr',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'format',
        'type' => 'const char *'
      },
      {
        'name' => 'arg2',
        'type' => '...'
      }
    ],
    'name' => 'apr_file_printf'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'fname',
        'type' => 'const char *'
      },
      {
        'name' => 'perms',
        'type' => 'apr_fileperms_t'
      }
    ],
    'name' => 'apr_file_perms_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'path',
        'type' => 'const char *'
      },
      {
        'name' => 'perm',
        'type' => 'apr_fileperms_t'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_dir_make'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'path',
        'type' => 'const char *'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_dir_remove'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'finfo',
        'type' => 'apr_finfo_t *'
      },
      {
        'name' => 'wanted',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'thefile',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'apr_file_info_get'
  },
  {
    'return_type' => 'apr_pool_t *',
    'args' => [
      {
        'name' => 'ob',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'apr_file_pool_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'pattern',
        'type' => 'const char *'
      },
      {
        'name' => 'strings',
        'type' => 'const char *'
      },
      {
        'name' => 'flags',
        'type' => 'int'
      }
    ],
    'name' => 'apr_fnmatch'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'pattern',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_is_fnmatch'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'buf',
        'type' => 'unsigned char *'
      },
      {
        'name' => 'length',
        'type' => 'int'
      }
    ],
    'name' => 'apr_generate_random_bytes'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [],
    'name' => 'apr_initialize'
  },
  {
    'return_type' => 'void',
    'args' => [],
    'name' => 'apr_terminate'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'arg0',
        'type' => 'int (*apr_abort)(int retcode)'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_set_abort'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'os',
        'type' => 'apr_getopt_t **'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'argc',
        'type' => 'int'
      },
      {
        'name' => 'argv',
        'type' => 'const char * const *'
      }
    ],
    'name' => 'apr_getopt_init'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'os',
        'type' => 'apr_getopt_t *'
      },
      {
        'name' => 'opts',
        'type' => 'const char *'
      },
      {
        'name' => 'optch',
        'type' => 'char *'
      },
      {
        'name' => 'optarg',
        'type' => 'const char **'
      }
    ],
    'name' => 'apr_getopt'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'os',
        'type' => 'apr_getopt_t *'
      },
      {
        'name' => 'opts',
        'type' => 'const apr_getopt_option_t *'
      },
      {
        'name' => 'optch',
        'type' => 'int *'
      },
      {
        'name' => 'optarg',
        'type' => 'const char **'
      }
    ],
    'name' => 'apr_getopt_long'
  },
  {
    'return_type' => 'apr_hash_t *',
    'args' => [
      {
        'name' => 'pool',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_hash_make'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'ht',
        'type' => 'apr_hash_t *'
      },
      {
        'name' => 'key',
        'type' => 'const void *'
      },
      {
        'name' => 'klen',
        'type' => 'apr_ssize_t'
      },
      {
        'name' => 'val',
        'type' => 'const void *'
      }
    ],
    'name' => 'apr_hash_set'
  },
  {
    'return_type' => 'void *',
    'args' => [
      {
        'name' => 'ht',
        'type' => 'apr_hash_t *'
      },
      {
        'name' => 'key',
        'type' => 'const void *'
      },
      {
        'name' => 'klen',
        'type' => 'apr_ssize_t'
      }
    ],
    'name' => 'apr_hash_get'
  },
  {
    'return_type' => 'apr_hash_index_t *',
    'args' => [
      {
        'name' => 'ht',
        'type' => 'apr_hash_t *'
      }
    ],
    'name' => 'apr_hash_first'
  },
  {
    'return_type' => 'apr_hash_index_t *',
    'args' => [
      {
        'name' => 'hi',
        'type' => 'apr_hash_index_t *'
      }
    ],
    'name' => 'apr_hash_next'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'hi',
        'type' => 'apr_hash_index_t *'
      },
      {
        'name' => 'key',
        'type' => 'const void **'
      },
      {
        'name' => 'klen',
        'type' => 'apr_size_t *'
      },
      {
        'name' => 'val',
        'type' => 'void **'
      }
    ],
    'name' => 'apr_hash_this'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'ht',
        'type' => 'apr_hash_t *'
      }
    ],
    'name' => 'apr_hash_count'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'pathname',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_filename_of_pathname'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'arg0',
        'type' => 'int (*flush_func)(apr_vformatter_buff_t *b)'
      },
      {
        'name' => 'c',
        'type' => 'apr_vformatter_buff_t *'
      },
      {
        'name' => 'fmt',
        'type' => 'const char *'
      },
      {
        'name' => 'ap',
        'type' => 'va_list'
      }
    ],
    'name' => 'apr_vformatter'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'passwd',
        'type' => 'const char *'
      },
      {
        'name' => 'hash',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_password_validate'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'prompt',
        'type' => 'const char *'
      },
      {
        'name' => 'pwbuf',
        'type' => 'char *'
      },
      {
        'name' => 'bufsize',
        'type' => 'size_t *'
      }
    ],
    'name' => 'apr_password_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'lock',
        'type' => 'apr_lock_t **'
      },
      {
        'name' => 'type',
        'type' => 'apr_locktype_e'
      },
      {
        'name' => 'scope',
        'type' => 'apr_lockscope_e'
      },
      {
        'name' => 'fname',
        'type' => 'const char *'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_lock_create'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'lock',
        'type' => 'apr_lock_t *'
      }
    ],
    'name' => 'apr_lock_acquire'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'lock',
        'type' => 'apr_lock_t *'
      }
    ],
    'name' => 'apr_lock_release'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'lock',
        'type' => 'apr_lock_t *'
      }
    ],
    'name' => 'apr_lock_destroy'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'lock',
        'type' => 'apr_lock_t **'
      },
      {
        'name' => 'fname',
        'type' => 'const char *'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_lock_child_init'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'lock',
        'type' => 'apr_lock_t *'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      },
      {
        'name' => 'data',
        'type' => 'void *'
      }
    ],
    'name' => 'apr_lock_data_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'lock',
        'type' => 'apr_lock_t *'
      },
      {
        'name' => 'data',
        'type' => 'void *'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      },
      {
        'name' => 'arg3',
        'type' => 'apr_status_t (*cleanup)(void *)'
      }
    ],
    'name' => 'apr_lock_data_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'convset',
        'type' => 'apr_xlate_t **'
      },
      {
        'name' => 'topage',
        'type' => 'const char *'
      },
      {
        'name' => 'frompage',
        'type' => 'const char *'
      },
      {
        'name' => 'pool',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_xlate_open'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'convset',
        'type' => 'apr_xlate_t *'
      },
      {
        'name' => 'onoff',
        'type' => 'int *'
      }
    ],
    'name' => 'apr_xlate_get_sb'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'convset',
        'type' => 'apr_xlate_t *'
      },
      {
        'name' => 'inbuf',
        'type' => 'const char *'
      },
      {
        'name' => 'inbytes_left',
        'type' => 'apr_size_t *'
      },
      {
        'name' => 'outbuf',
        'type' => 'char *'
      },
      {
        'name' => 'outbytes_left',
        'type' => 'apr_size_t *'
      }
    ],
    'name' => 'apr_xlate_conv_buffer'
  },
  {
    'return_type' => 'apr_int32_t',
    'args' => [
      {
        'name' => 'convset',
        'type' => 'apr_xlate_t *'
      },
      {
        'name' => 'inchar',
        'type' => 'unsigned char'
      }
    ],
    'name' => 'apr_xlate_conv_byte'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'convset',
        'type' => 'apr_xlate_t *'
      }
    ],
    'name' => 'apr_xlate_close'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'context',
        'type' => 'apr_md5_ctx_t *'
      }
    ],
    'name' => 'apr_md5_init'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'context',
        'type' => 'apr_md5_ctx_t *'
      },
      {
        'name' => 'xlate',
        'type' => 'apr_xlate_t *'
      }
    ],
    'name' => 'apr_md5_set_xlate'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'context',
        'type' => 'apr_md5_ctx_t *'
      },
      {
        'name' => 'input',
        'type' => 'const unsigned char *'
      },
      {
        'name' => 'inputLen',
        'type' => 'unsigned int'
      }
    ],
    'name' => 'apr_md5_update'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'digest',
        'type' => 'unsigned char'
      },
      {
        'name' => 'context',
        'type' => 'apr_md5_ctx_t *'
      }
    ],
    'name' => 'apr_md5_final'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'password',
        'type' => 'const char *'
      },
      {
        'name' => 'salt',
        'type' => 'const char *'
      },
      {
        'name' => 'result',
        'type' => 'char *'
      },
      {
        'name' => 'nbytes',
        'type' => 'size_t'
      }
    ],
    'name' => 'apr_md5_encode'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'newmmap',
        'type' => 'apr_mmap_t **'
      },
      {
        'name' => 'file',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'offset',
        'type' => 'apr_off_t'
      },
      {
        'name' => 'size',
        'type' => 'apr_size_t'
      },
      {
        'name' => 'flag',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'cntxt',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_mmap_create'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'mmap',
        'type' => 'apr_mmap_t *'
      }
    ],
    'name' => 'apr_mmap_delete'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'addr',
        'type' => 'void **'
      },
      {
        'name' => 'mmap',
        'type' => 'apr_mmap_t *'
      },
      {
        'name' => 'offset',
        'type' => 'apr_off_t'
      }
    ],
    'name' => 'apr_mmap_offset'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'new_sock',
        'type' => 'apr_socket_t **'
      },
      {
        'name' => 'family',
        'type' => 'int'
      },
      {
        'name' => 'type',
        'type' => 'int'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_socket_create'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thesocket',
        'type' => 'apr_socket_t *'
      },
      {
        'name' => 'how',
        'type' => 'apr_shutdown_how_e'
      }
    ],
    'name' => 'apr_shutdown'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thesocket',
        'type' => 'apr_socket_t *'
      }
    ],
    'name' => 'apr_socket_close'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'sock',
        'type' => 'apr_socket_t *'
      },
      {
        'name' => 'sa',
        'type' => 'apr_sockaddr_t *'
      }
    ],
    'name' => 'apr_bind'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'sock',
        'type' => 'apr_socket_t *'
      },
      {
        'name' => 'backlog',
        'type' => 'apr_int32_t'
      }
    ],
    'name' => 'apr_listen'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'new_sock',
        'type' => 'apr_socket_t **'
      },
      {
        'name' => 'sock',
        'type' => 'apr_socket_t *'
      },
      {
        'name' => 'connection_pool',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_accept'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'sock',
        'type' => 'apr_socket_t *'
      },
      {
        'name' => 'sa',
        'type' => 'apr_sockaddr_t *'
      }
    ],
    'name' => 'apr_connect'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'sa',
        'type' => 'apr_sockaddr_t **'
      },
      {
        'name' => 'hostname',
        'type' => 'const char *'
      },
      {
        'name' => 'family',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'port',
        'type' => 'apr_port_t'
      },
      {
        'name' => 'flags',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_sockaddr_info_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'hostname',
        'type' => 'char **'
      },
      {
        'name' => 'sa',
        'type' => 'apr_sockaddr_t *'
      },
      {
        'name' => 'flags',
        'type' => 'apr_int32_t'
      }
    ],
    'name' => 'apr_getnameinfo'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'addr',
        'type' => 'char **'
      },
      {
        'name' => 'scope_id',
        'type' => 'char **'
      },
      {
        'name' => 'port',
        'type' => 'apr_port_t *'
      },
      {
        'name' => 'str',
        'type' => 'const char *'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_parse_addr_port'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'buf',
        'type' => 'char *'
      },
      {
        'name' => 'len',
        'type' => 'int'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_gethostname'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'data',
        'type' => 'void **'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      },
      {
        'name' => 'sock',
        'type' => 'apr_socket_t *'
      }
    ],
    'name' => 'apr_socket_data_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'sock',
        'type' => 'apr_socket_t *'
      },
      {
        'name' => 'data',
        'type' => 'void *'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      },
      {
        'name' => 'arg3',
        'type' => 'apr_status_t (*cleanup)(void*)'
      }
    ],
    'name' => 'apr_socket_data_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'sock',
        'type' => 'apr_socket_t *'
      },
      {
        'name' => 'buf',
        'type' => 'const char *'
      },
      {
        'name' => 'len',
        'type' => 'apr_size_t *'
      }
    ],
    'name' => 'apr_send'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'sock',
        'type' => 'apr_socket_t *'
      },
      {
        'name' => 'vec',
        'type' => 'const struct iovec *'
      },
      {
        'name' => 'nvec',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'len',
        'type' => 'apr_size_t *'
      }
    ],
    'name' => 'apr_sendv'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'sock',
        'type' => 'apr_socket_t *'
      },
      {
        'name' => 'where',
        'type' => 'apr_sockaddr_t *'
      },
      {
        'name' => 'flags',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'buf',
        'type' => 'const char *'
      },
      {
        'name' => 'len',
        'type' => 'apr_size_t *'
      }
    ],
    'name' => 'apr_sendto'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'from',
        'type' => 'apr_sockaddr_t *'
      },
      {
        'name' => 'sock',
        'type' => 'apr_socket_t *'
      },
      {
        'name' => 'flags',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'buf',
        'type' => 'char *'
      },
      {
        'name' => 'len',
        'type' => 'apr_size_t *'
      }
    ],
    'name' => 'apr_recvfrom'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'sock',
        'type' => 'apr_socket_t *'
      },
      {
        'name' => 'file',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'hdtr',
        'type' => 'apr_hdtr_t *'
      },
      {
        'name' => 'offset',
        'type' => 'apr_off_t *'
      },
      {
        'name' => 'len',
        'type' => 'apr_size_t *'
      },
      {
        'name' => 'flags',
        'type' => 'apr_int32_t'
      }
    ],
    'name' => 'apr_sendfile'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'sock',
        'type' => 'apr_socket_t *'
      },
      {
        'name' => 'buf',
        'type' => 'char *'
      },
      {
        'name' => 'len',
        'type' => 'apr_size_t *'
      }
    ],
    'name' => 'apr_recv'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'sock',
        'type' => 'apr_socket_t *'
      },
      {
        'name' => 'opt',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'on',
        'type' => 'apr_int32_t'
      }
    ],
    'name' => 'apr_setsocketopt'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'sock',
        'type' => 'apr_socket_t *'
      },
      {
        'name' => 'opt',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'on',
        'type' => 'apr_int32_t *'
      }
    ],
    'name' => 'apr_getsocketopt'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'sa',
        'type' => 'apr_sockaddr_t **'
      },
      {
        'name' => 'which',
        'type' => 'apr_interface_e'
      },
      {
        'name' => 'sock',
        'type' => 'apr_socket_t *'
      }
    ],
    'name' => 'apr_socket_addr_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'sockaddr',
        'type' => 'apr_sockaddr_t *'
      },
      {
        'name' => 'port',
        'type' => 'apr_port_t'
      }
    ],
    'name' => 'apr_sockaddr_port_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'port',
        'type' => 'apr_port_t *'
      },
      {
        'name' => 'sockaddr',
        'type' => 'apr_sockaddr_t *'
      }
    ],
    'name' => 'apr_sockaddr_port_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'sockaddr',
        'type' => 'apr_sockaddr_t *'
      },
      {
        'name' => 'addr',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_sockaddr_ip_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'addr',
        'type' => 'char **'
      },
      {
        'name' => 'sockaddr',
        'type' => 'apr_sockaddr_t *'
      }
    ],
    'name' => 'apr_sockaddr_ip_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'new_poll',
        'type' => 'apr_pollfd_t **'
      },
      {
        'name' => 'num',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_poll_setup'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'aprset',
        'type' => 'apr_pollfd_t *'
      },
      {
        'name' => 'nsds',
        'type' => 'apr_int32_t *'
      },
      {
        'name' => 'timeout',
        'type' => 'apr_interval_time_t'
      }
    ],
    'name' => 'apr_poll'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'aprset',
        'type' => 'apr_pollfd_t *'
      },
      {
        'name' => 'sock',
        'type' => 'apr_socket_t *'
      },
      {
        'name' => 'event',
        'type' => 'apr_int16_t'
      }
    ],
    'name' => 'apr_poll_socket_add'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'aprset',
        'type' => 'apr_pollfd_t *'
      },
      {
        'name' => 'sock',
        'type' => 'apr_socket_t *'
      },
      {
        'name' => 'events',
        'type' => 'apr_int16_t'
      }
    ],
    'name' => 'apr_poll_socket_mask'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'aprset',
        'type' => 'apr_pollfd_t *'
      },
      {
        'name' => 'sock',
        'type' => 'apr_socket_t *'
      }
    ],
    'name' => 'apr_poll_socket_remove'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'aprset',
        'type' => 'apr_pollfd_t *'
      },
      {
        'name' => 'events',
        'type' => 'apr_int16_t'
      }
    ],
    'name' => 'apr_poll_socket_clear'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'event',
        'type' => 'apr_int16_t *'
      },
      {
        'name' => 'sock',
        'type' => 'apr_socket_t *'
      },
      {
        'name' => 'aprset',
        'type' => 'apr_pollfd_t *'
      }
    ],
    'name' => 'apr_poll_revents_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'pollfd',
        'type' => 'apr_pollfd_t *'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      },
      {
        'name' => 'data',
        'type' => 'void *'
      }
    ],
    'name' => 'apr_poll_data_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'pollfd',
        'type' => 'apr_pollfd_t *'
      },
      {
        'name' => 'data',
        'type' => 'void *'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      },
      {
        'name' => 'arg3',
        'type' => 'apr_status_t (*cleanup)(void *)'
      }
    ],
    'name' => 'apr_poll_data_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'newsock',
        'type' => 'apr_socket_t **'
      },
      {
        'name' => 'file',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'apr_socket_from_file'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'sockaddr',
        'type' => 'apr_sockaddr_t *'
      },
      {
        'name' => 'servname',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_getservbyname'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'ipsub',
        'type' => 'apr_ipsubnet_t **'
      },
      {
        'name' => 'ipstr',
        'type' => 'const char *'
      },
      {
        'name' => 'mask_or_numbits',
        'type' => 'const char *'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_ipsubnet_create'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'ipsub',
        'type' => 'apr_ipsubnet_t *'
      },
      {
        'name' => 'sa',
        'type' => 'apr_sockaddr_t *'
      }
    ],
    'name' => 'apr_ipsubnet_test'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'new_attr',
        'type' => 'apr_threadattr_t **'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_threadattr_create'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'attr',
        'type' => 'apr_threadattr_t *'
      },
      {
        'name' => 'on',
        'type' => 'apr_int32_t'
      }
    ],
    'name' => 'apr_threadattr_detach_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'attr',
        'type' => 'apr_threadattr_t *'
      }
    ],
    'name' => 'apr_threadattr_detach_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'new_thread',
        'type' => 'apr_thread_t **'
      },
      {
        'name' => 'attr',
        'type' => 'apr_threadattr_t *'
      },
      {
        'name' => 'func',
        'type' => 'apr_thread_start_t'
      },
      {
        'name' => 'data',
        'type' => 'void *'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_thread_create'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thd',
        'type' => 'apr_thread_t *'
      },
      {
        'name' => 'retval',
        'type' => 'apr_status_t *'
      }
    ],
    'name' => 'apr_thread_exit'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'retval',
        'type' => 'apr_status_t *'
      },
      {
        'name' => 'thd',
        'type' => 'apr_thread_t *'
      }
    ],
    'name' => 'apr_thread_join'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thd',
        'type' => 'apr_thread_t *'
      }
    ],
    'name' => 'apr_thread_detach'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'data',
        'type' => 'void **'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      },
      {
        'name' => 'thread',
        'type' => 'apr_thread_t *'
      }
    ],
    'name' => 'apr_thread_data_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'data',
        'type' => 'void *'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      },
      {
        'name' => 'arg2',
        'type' => 'apr_status_t (*cleanup) (void *)'
      },
      {
        'name' => 'thread',
        'type' => 'apr_thread_t *'
      }
    ],
    'name' => 'apr_thread_data_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'key',
        'type' => 'apr_threadkey_t **'
      },
      {
        'name' => 'arg1',
        'type' => 'void (*dest)(void *)'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_threadkey_private_create'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'new_mem',
        'type' => 'void **'
      },
      {
        'name' => 'key',
        'type' => 'apr_threadkey_t *'
      }
    ],
    'name' => 'apr_threadkey_private_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'priv',
        'type' => 'void *'
      },
      {
        'name' => 'key',
        'type' => 'apr_threadkey_t *'
      }
    ],
    'name' => 'apr_threadkey_private_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'key',
        'type' => 'apr_threadkey_t *'
      }
    ],
    'name' => 'apr_threadkey_private_delete'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'data',
        'type' => 'void **'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      },
      {
        'name' => 'threadkey',
        'type' => 'apr_threadkey_t *'
      }
    ],
    'name' => 'apr_threadkey_data_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'data',
        'type' => 'void *'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      },
      {
        'name' => 'arg2',
        'type' => 'apr_status_t (*cleanup) (void *)'
      },
      {
        'name' => 'threadkey',
        'type' => 'apr_threadkey_t *'
      }
    ],
    'name' => 'apr_threadkey_data_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'new_attr',
        'type' => 'apr_procattr_t **'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_procattr_create'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'attr',
        'type' => 'apr_procattr_t *'
      },
      {
        'name' => 'in',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'out',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'err',
        'type' => 'apr_int32_t'
      }
    ],
    'name' => 'apr_procattr_io_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'attr',
        'type' => 'struct apr_procattr_t *'
      },
      {
        'name' => 'child_in',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'parent_in',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'apr_procattr_child_in_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'attr',
        'type' => 'struct apr_procattr_t *'
      },
      {
        'name' => 'child_out',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'parent_out',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'apr_procattr_child_out_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'attr',
        'type' => 'struct apr_procattr_t *'
      },
      {
        'name' => 'child_err',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'parent_err',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'apr_procattr_child_err_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'attr',
        'type' => 'apr_procattr_t *'
      },
      {
        'name' => 'dir',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_procattr_dir_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'attr',
        'type' => 'apr_procattr_t *'
      },
      {
        'name' => 'cmd',
        'type' => 'apr_cmdtype_e'
      }
    ],
    'name' => 'apr_procattr_cmdtype_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'attr',
        'type' => 'apr_procattr_t *'
      },
      {
        'name' => 'detach',
        'type' => 'apr_int32_t'
      }
    ],
    'name' => 'apr_procattr_detach_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'attr',
        'type' => 'apr_procattr_t *'
      },
      {
        'name' => 'what',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'limit',
        'type' => 'struct rlimit *'
      }
    ],
    'name' => 'apr_procattr_limit_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'proc',
        'type' => 'apr_proc_t *'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_proc_fork'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'new_proc',
        'type' => 'apr_proc_t *'
      },
      {
        'name' => 'progname',
        'type' => 'const char *'
      },
      {
        'name' => 'args',
        'type' => 'const char * const *'
      },
      {
        'name' => 'env',
        'type' => 'const char * const *'
      },
      {
        'name' => 'attr',
        'type' => 'apr_procattr_t *'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_proc_create'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'proc',
        'type' => 'apr_proc_t *'
      },
      {
        'name' => 'waithow',
        'type' => 'apr_wait_how_e'
      }
    ],
    'name' => 'apr_proc_wait'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'proc',
        'type' => 'apr_proc_t *'
      },
      {
        'name' => 'status',
        'type' => 'int *'
      },
      {
        'name' => 'waithow',
        'type' => 'apr_wait_how_e'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_proc_wait_all_procs'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [],
    'name' => 'apr_proc_detach'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pid',
        'type' => 'apr_proc_t *'
      },
      {
        'name' => 'arg1',
        'type' => 'void (*maintenance) (int reason,
                                                                void *,
                                                                int status)'
      },
      {
        'name' => 'data',
        'type' => 'void *'
      },
      {
        'name' => 'write_fd',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_proc_other_child_register'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'data',
        'type' => 'void *'
      }
    ],
    'name' => 'apr_proc_other_child_unregister'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'pid',
        'type' => 'apr_proc_t *'
      },
      {
        'name' => 'status',
        'type' => 'int'
      }
    ],
    'name' => 'apr_proc_other_child_read'
  },
  {
    'return_type' => 'void',
    'args' => [],
    'name' => 'apr_proc_other_child_check'
  },
  {
    'return_type' => 'void',
    'args' => [],
    'name' => 'apr_proc_probe_writable_fds'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'proc',
        'type' => 'apr_proc_t *'
      },
      {
        'name' => 'sig',
        'type' => 'int'
      }
    ],
    'name' => 'apr_proc_kill'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'a',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'pid',
        'type' => 'apr_proc_t *'
      },
      {
        'name' => 'how',
        'type' => 'enum kill_conditions'
      }
    ],
    'name' => 'apr_pool_note_subprocess'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [],
    'name' => 'apr_setup_signal_thread'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'arg0',
        'type' => 'int(*signal_handler)(int signum)'
      }
    ],
    'name' => 'apr_signal_thread'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thefile',
        'type' => 'apr_os_file_t *'
      },
      {
        'name' => 'file',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'apr_os_file_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thedir',
        'type' => 'apr_os_dir_t **'
      },
      {
        'name' => 'dir',
        'type' => 'apr_dir_t *'
      }
    ],
    'name' => 'apr_os_dir_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thesock',
        'type' => 'apr_os_sock_t *'
      },
      {
        'name' => 'sock',
        'type' => 'apr_socket_t *'
      }
    ],
    'name' => 'apr_os_sock_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'oslock',
        'type' => 'apr_os_lock_t *'
      },
      {
        'name' => 'lock',
        'type' => 'apr_lock_t *'
      }
    ],
    'name' => 'apr_os_lock_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'ostime',
        'type' => 'apr_os_exp_time_t **'
      },
      {
        'name' => 'aprtime',
        'type' => 'apr_exploded_time_t *'
      }
    ],
    'name' => 'apr_os_exp_time_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'ostime',
        'type' => 'apr_os_imp_time_t **'
      },
      {
        'name' => 'aprtime',
        'type' => 'apr_time_t *'
      }
    ],
    'name' => 'apr_os_imp_time_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thethd',
        'type' => 'apr_os_thread_t **'
      },
      {
        'name' => 'thd',
        'type' => 'apr_thread_t *'
      }
    ],
    'name' => 'apr_os_thread_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thekey',
        'type' => 'apr_os_threadkey_t *'
      },
      {
        'name' => 'key',
        'type' => 'apr_threadkey_t *'
      }
    ],
    'name' => 'apr_os_threadkey_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'file',
        'type' => 'apr_file_t **'
      },
      {
        'name' => 'thefile',
        'type' => 'apr_os_file_t *'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_os_file_put'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'dir',
        'type' => 'apr_dir_t **'
      },
      {
        'name' => 'thedir',
        'type' => 'apr_os_dir_t *'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_os_dir_put'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'sock',
        'type' => 'apr_socket_t **'
      },
      {
        'name' => 'thesock',
        'type' => 'apr_os_sock_t *'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_os_sock_put'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'apr_sock',
        'type' => 'apr_socket_t **'
      },
      {
        'name' => 'os_sock_info',
        'type' => 'apr_os_sock_info_t *'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_os_sock_make'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'lock',
        'type' => 'apr_lock_t **'
      },
      {
        'name' => 'thelock',
        'type' => 'apr_os_lock_t *'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_os_lock_put'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'aprtime',
        'type' => 'apr_time_t *'
      },
      {
        'name' => 'ostime',
        'type' => 'apr_os_imp_time_t **'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_os_imp_time_put'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'aprtime',
        'type' => 'apr_exploded_time_t *'
      },
      {
        'name' => 'ostime',
        'type' => 'apr_os_exp_time_t **'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_os_exp_time_put'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'thd',
        'type' => 'apr_thread_t **'
      },
      {
        'name' => 'thethd',
        'type' => 'apr_os_thread_t *'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_os_thread_put'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'key',
        'type' => 'apr_threadkey_t **'
      },
      {
        'name' => 'thekey',
        'type' => 'apr_os_threadkey_t *'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_os_threadkey_put'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'dso',
        'type' => 'apr_dso_handle_t **'
      },
      {
        'name' => 'thedso',
        'type' => 'apr_os_dso_handle_t *'
      },
      {
        'name' => 'pool',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_os_dso_handle_put'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'dso',
        'type' => 'apr_os_dso_handle_t *'
      },
      {
        'name' => 'aprdso',
        'type' => 'apr_dso_handle_t *'
      }
    ],
    'name' => 'apr_os_dso_handle_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'm',
        'type' => 'apr_shmem_t **'
      },
      {
        'name' => 'reqsize',
        'type' => 'apr_size_t'
      },
      {
        'name' => 'file',
        'type' => 'const char *'
      },
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_shm_init'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'm',
        'type' => 'apr_shmem_t *'
      }
    ],
    'name' => 'apr_shm_destroy'
  },
  {
    'return_type' => 'void *',
    'args' => [
      {
        'name' => 'c',
        'type' => 'apr_shmem_t *'
      },
      {
        'name' => 'reqsize',
        'type' => 'apr_size_t'
      }
    ],
    'name' => 'apr_shm_malloc'
  },
  {
    'return_type' => 'void *',
    'args' => [
      {
        'name' => 'shared',
        'type' => 'apr_shmem_t *'
      },
      {
        'name' => 'size',
        'type' => 'apr_size_t'
      }
    ],
    'name' => 'apr_shm_calloc'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'shared',
        'type' => 'apr_shmem_t *'
      },
      {
        'name' => 'entity',
        'type' => 'void *'
      }
    ],
    'name' => 'apr_shm_free'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'c',
        'type' => 'apr_shmem_t *'
      },
      {
        'name' => 'name',
        'type' => 'apr_shm_name_t **'
      }
    ],
    'name' => 'apr_shm_name_get'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'c',
        'type' => 'apr_shmem_t *'
      },
      {
        'name' => 'name',
        'type' => 'apr_shm_name_t *'
      }
    ],
    'name' => 'apr_shm_name_set'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'c',
        'type' => 'apr_shmem_t *'
      }
    ],
    'name' => 'apr_shm_open'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'c',
        'type' => 'apr_shmem_t *'
      },
      {
        'name' => 'avail',
        'type' => 'apr_size_t *'
      }
    ],
    'name' => 'apr_shm_avail'
  },
  {
    'return_type' => 'apr_sigfunc_t *',
    'args' => [
      {
        'name' => 'signo',
        'type' => 'int'
      },
      {
        'name' => 'func',
        'type' => 'apr_sigfunc_t *'
      }
    ],
    'name' => 'apr_signal'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'signum',
        'type' => 'int'
      }
    ],
    'name' => 'apr_signal_get_description'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pglobal',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_signal_init'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'a',
        'type' => 'char const *'
      },
      {
        'name' => 'b',
        'type' => 'char const *'
      }
    ],
    'name' => 'apr_strnatcmp'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'a',
        'type' => 'char const *'
      },
      {
        'name' => 'b',
        'type' => 'char const *'
      }
    ],
    'name' => 'apr_strnatcasecmp'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 's',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_pstrdup'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 's',
        'type' => 'const char *'
      },
      {
        'name' => 'n',
        'type' => 'apr_size_t'
      }
    ],
    'name' => 'apr_pstrndup'
  },
  {
    'return_type' => 'void *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'm',
        'type' => 'const void *'
      },
      {
        'name' => 'n',
        'type' => 'apr_size_t'
      }
    ],
    'name' => 'apr_pmemdup'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'arg1',
        'type' => '...'
      }
    ],
    'name' => 'apr_pstrcat'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'fmt',
        'type' => 'const char *'
      },
      {
        'name' => 'ap',
        'type' => 'va_list'
      }
    ],
    'name' => 'apr_pvsprintf'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'fmt',
        'type' => 'const char *'
      },
      {
        'name' => 'arg2',
        'type' => '...'
      }
    ],
    'name' => 'apr_psprintf'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'dst',
        'type' => 'char *'
      },
      {
        'name' => 'src',
        'type' => 'const char *'
      },
      {
        'name' => 'dst_size',
        'type' => 'size_t'
      }
    ],
    'name' => 'apr_cpystrn'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'dest',
        'type' => 'char *'
      },
      {
        'name' => 'src',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_collapse_spaces'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'arg_str',
        'type' => 'const char *'
      },
      {
        'name' => 'argv_out',
        'type' => 'char ***'
      },
      {
        'name' => 'token_context',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_tokenize_to_argv'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'buf',
        'type' => 'char *'
      },
      {
        'name' => 'len',
        'type' => 'size_t'
      },
      {
        'name' => 'format',
        'type' => 'const char *'
      },
      {
        'name' => 'arg3',
        'type' => '...'
      }
    ],
    'name' => 'apr_snprintf'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'buf',
        'type' => 'char *'
      },
      {
        'name' => 'len',
        'type' => 'size_t'
      },
      {
        'name' => 'format',
        'type' => 'const char *'
      },
      {
        'name' => 'ap',
        'type' => 'va_list'
      }
    ],
    'name' => 'apr_vsnprintf'
  },
  {
    'return_type' => 'apr_array_header_t *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'struct apr_pool_t *'
      },
      {
        'name' => 'nelts',
        'type' => 'int'
      },
      {
        'name' => 'elt_size',
        'type' => 'int'
      }
    ],
    'name' => 'apr_array_make'
  },
  {
    'return_type' => 'void *',
    'args' => [
      {
        'name' => 'arr',
        'type' => 'apr_array_header_t *'
      }
    ],
    'name' => 'apr_array_push'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'dst',
        'type' => 'apr_array_header_t *'
      },
      {
        'name' => 'src',
        'type' => 'const apr_array_header_t *'
      }
    ],
    'name' => 'apr_array_cat'
  },
  {
    'return_type' => 'apr_array_header_t *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'struct apr_pool_t *'
      },
      {
        'name' => 'arr',
        'type' => 'const apr_array_header_t *'
      }
    ],
    'name' => 'apr_array_copy'
  },
  {
    'return_type' => 'apr_array_header_t *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'struct apr_pool_t *'
      },
      {
        'name' => 'arr',
        'type' => 'const apr_array_header_t *'
      }
    ],
    'name' => 'apr_array_copy_hdr'
  },
  {
    'return_type' => 'apr_array_header_t *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'struct apr_pool_t *'
      },
      {
        'name' => 'first',
        'type' => 'const apr_array_header_t *'
      },
      {
        'name' => 'second',
        'type' => 'const apr_array_header_t *'
      }
    ],
    'name' => 'apr_array_append'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'struct apr_pool_t *'
      },
      {
        'name' => 'arr',
        'type' => 'const apr_array_header_t *'
      },
      {
        'name' => 'sep',
        'type' => 'const char'
      }
    ],
    'name' => 'apr_array_pstrcat'
  },
  {
    'return_type' => 'apr_table_t *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'struct apr_pool_t *'
      },
      {
        'name' => 'nelts',
        'type' => 'int'
      }
    ],
    'name' => 'apr_table_make'
  },
  {
    'return_type' => 'apr_table_t *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'struct apr_pool_t *'
      },
      {
        'name' => 't',
        'type' => 'const apr_table_t *'
      }
    ],
    'name' => 'apr_table_copy'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 't',
        'type' => 'apr_table_t *'
      }
    ],
    'name' => 'apr_table_clear'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 't',
        'type' => 'const apr_table_t *'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_table_get'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 't',
        'type' => 'apr_table_t *'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      },
      {
        'name' => 'val',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_table_set'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 't',
        'type' => 'apr_table_t *'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      },
      {
        'name' => 'val',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_table_setn'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 't',
        'type' => 'apr_table_t *'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_table_unset'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 't',
        'type' => 'apr_table_t *'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      },
      {
        'name' => 'val',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_table_merge'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 't',
        'type' => 'apr_table_t *'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      },
      {
        'name' => 'val',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_table_mergen'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 't',
        'type' => 'apr_table_t *'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      },
      {
        'name' => 'val',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_table_add'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 't',
        'type' => 'apr_table_t *'
      },
      {
        'name' => 'key',
        'type' => 'const char *'
      },
      {
        'name' => 'val',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_table_addn'
  },
  {
    'return_type' => 'apr_table_t *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'struct apr_pool_t *'
      },
      {
        'name' => 'overlay',
        'type' => 'const apr_table_t *'
      },
      {
        'name' => 'base',
        'type' => 'const apr_table_t *'
      }
    ],
    'name' => 'apr_table_overlay'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'arg0',
        'type' => 'int (*comp)(void *, const char *, const char *)'
      },
      {
        'name' => 'rec',
        'type' => 'void *'
      },
      {
        'name' => 't',
        'type' => 'const apr_table_t *'
      },
      {
        'name' => 'arg3',
        'type' => '...'
      }
    ],
    'name' => 'apr_table_do'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'arg0',
        'type' => 'int (*comp)(void *, const char *, const char *)'
      },
      {
        'name' => 'rec',
        'type' => 'void *'
      },
      {
        'name' => 't',
        'type' => 'const apr_table_t *'
      },
      {
        'name' => 'arg3',
        'type' => 'va_list'
      }
    ],
    'name' => 'apr_table_vdo'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'a',
        'type' => 'apr_table_t *'
      },
      {
        'name' => 'b',
        'type' => 'const apr_table_t *'
      },
      {
        'name' => 'flags',
        'type' => 'unsigned'
      }
    ],
    'name' => 'apr_table_overlap'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'uuid',
        'type' => 'apr_uuid_t *'
      }
    ],
    'name' => 'apr_uuid_get'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'buffer',
        'type' => 'char *'
      },
      {
        'name' => 'uuid',
        'type' => 'const apr_uuid_t *'
      }
    ],
    'name' => 'apr_uuid_format'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'uuid',
        'type' => 'apr_uuid_t *'
      },
      {
        'name' => 'uuid_str',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_uuid_parse'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'len',
        'type' => 'int'
      }
    ],
    'name' => 'apr_base64_encode_len'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'coded_dst',
        'type' => 'char *'
      },
      {
        'name' => 'plain_src',
        'type' => 'const char *'
      },
      {
        'name' => 'len_plain_src',
        'type' => 'int'
      }
    ],
    'name' => 'apr_base64_encode'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'coded_dst',
        'type' => 'char *'
      },
      {
        'name' => 'plain_src',
        'type' => 'const unsigned char *'
      },
      {
        'name' => 'len_plain_src',
        'type' => 'int'
      }
    ],
    'name' => 'apr_base64_encode_binary'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'coded_src',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_base64_decode_len'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'plain_dst',
        'type' => 'char *'
      },
      {
        'name' => 'coded_src',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_base64_decode'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'plain_dst',
        'type' => 'unsigned char *'
      },
      {
        'name' => 'coded_src',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_base64_decode_binary'
  },
  {
    'return_type' => 'apr_bucket_brigade *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_brigade_create'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket_brigade *'
      }
    ],
    'name' => 'apr_brigade_destroy'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'data',
        'type' => 'void *'
      }
    ],
    'name' => 'apr_brigade_cleanup'
  },
  {
    'return_type' => 'apr_bucket_brigade *',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket_brigade *'
      },
      {
        'name' => 'e',
        'type' => 'apr_bucket *'
      }
    ],
    'name' => 'apr_brigade_split'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket_brigade *'
      },
      {
        'name' => 'point',
        'type' => 'apr_off_t'
      }
    ],
    'name' => 'apr_brigade_partition'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'bb',
        'type' => 'apr_bucket_brigade *'
      },
      {
        'name' => 'read_all',
        'type' => 'int'
      },
      {
        'name' => 'length',
        'type' => 'apr_ssize_t *'
      }
    ],
    'name' => 'apr_brigade_length'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket_brigade *'
      },
      {
        'name' => 'vec',
        'type' => 'struct iovec *'
      },
      {
        'name' => 'nvec',
        'type' => 'int'
      }
    ],
    'name' => 'apr_brigade_to_iovec'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket_brigade *'
      },
      {
        'name' => 'flush',
        'type' => 'apr_brigade_flush'
      },
      {
        'name' => 'ctx',
        'type' => 'void *'
      },
      {
        'name' => 'va',
        'type' => 'va_list'
      }
    ],
    'name' => 'apr_brigade_vputstrs'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket_brigade *'
      },
      {
        'name' => 'flush',
        'type' => 'apr_brigade_flush'
      },
      {
        'name' => 'ctx',
        'type' => 'void *'
      },
      {
        'name' => 'str',
        'type' => 'const char *'
      },
      {
        'name' => 'nbyte',
        'type' => 'apr_size_t'
      }
    ],
    'name' => 'apr_brigade_write'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket_brigade *'
      },
      {
        'name' => 'flush',
        'type' => 'apr_brigade_flush'
      },
      {
        'name' => 'ctx',
        'type' => 'void *'
      },
      {
        'name' => 'str',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_brigade_puts'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket_brigade *'
      },
      {
        'name' => 'flush',
        'type' => 'apr_brigade_flush'
      },
      {
        'name' => 'ctx',
        'type' => 'void *'
      },
      {
        'name' => 'c',
        'type' => 'const char'
      }
    ],
    'name' => 'apr_brigade_putc'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket_brigade *'
      },
      {
        'name' => 'flush',
        'type' => 'apr_brigade_flush'
      },
      {
        'name' => 'ctx',
        'type' => 'void *'
      },
      {
        'name' => 'arg3',
        'type' => '...'
      }
    ],
    'name' => 'apr_brigade_putstrs'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket_brigade *'
      },
      {
        'name' => 'flush',
        'type' => 'apr_brigade_flush'
      },
      {
        'name' => 'ctx',
        'type' => 'void *'
      },
      {
        'name' => 'fmt',
        'type' => 'const char *'
      },
      {
        'name' => 'arg4',
        'type' => '...'
      }
    ],
    'name' => 'apr_brigade_printf'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket_brigade *'
      },
      {
        'name' => 'flush',
        'type' => 'apr_brigade_flush'
      },
      {
        'name' => 'ctx',
        'type' => 'void *'
      },
      {
        'name' => 'fmt',
        'type' => 'const char *'
      },
      {
        'name' => 'va',
        'type' => 'va_list'
      }
    ],
    'name' => 'apr_brigade_vprintf'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'data',
        'type' => 'apr_bucket *'
      }
    ],
    'name' => 'apr_bucket_setaside_notimpl'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'data',
        'type' => 'apr_bucket *'
      },
      {
        'name' => 'point',
        'type' => 'apr_off_t'
      }
    ],
    'name' => 'apr_bucket_split_notimpl'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'e',
        'type' => 'apr_bucket *'
      },
      {
        'name' => 'c',
        'type' => 'apr_bucket **'
      }
    ],
    'name' => 'apr_bucket_copy_notimpl'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'data',
        'type' => 'void *'
      }
    ],
    'name' => 'apr_bucket_destroy_notimpl'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket *'
      },
      {
        'name' => 'point',
        'type' => 'apr_off_t'
      }
    ],
    'name' => 'apr_bucket_simple_split'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'a',
        'type' => 'apr_bucket *'
      },
      {
        'name' => 'b',
        'type' => 'apr_bucket **'
      }
    ],
    'name' => 'apr_bucket_simple_copy'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket *'
      },
      {
        'name' => 'data',
        'type' => 'void *'
      },
      {
        'name' => 'start',
        'type' => 'apr_off_t'
      },
      {
        'name' => 'length',
        'type' => 'apr_off_t'
      }
    ],
    'name' => 'apr_bucket_shared_make'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'data',
        'type' => 'void *'
      }
    ],
    'name' => 'apr_bucket_shared_destroy'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket *'
      },
      {
        'name' => 'point',
        'type' => 'apr_off_t'
      }
    ],
    'name' => 'apr_bucket_shared_split'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'a',
        'type' => 'apr_bucket *'
      },
      {
        'name' => 'b',
        'type' => 'apr_bucket **'
      }
    ],
    'name' => 'apr_bucket_shared_copy'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [],
    'name' => 'apr_bucket_eos_create'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket *'
      }
    ],
    'name' => 'apr_bucket_eos_make'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [],
    'name' => 'apr_bucket_flush_create'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket *'
      }
    ],
    'name' => 'apr_bucket_flush_make'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'buf',
        'type' => 'const char *'
      },
      {
        'name' => 'nbyte',
        'type' => 'apr_size_t'
      }
    ],
    'name' => 'apr_bucket_immortal_create'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket *'
      },
      {
        'name' => 'buf',
        'type' => 'const char *'
      },
      {
        'name' => 'nbyte',
        'type' => 'apr_size_t'
      }
    ],
    'name' => 'apr_bucket_immortal_make'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'buf',
        'type' => 'const char *'
      },
      {
        'name' => 'nbyte',
        'type' => 'apr_size_t'
      }
    ],
    'name' => 'apr_bucket_transient_create'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket *'
      },
      {
        'name' => 'buf',
        'type' => 'const char *'
      },
      {
        'name' => 'nbyte',
        'type' => 'apr_size_t'
      }
    ],
    'name' => 'apr_bucket_transient_make'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'buf',
        'type' => 'const char *'
      },
      {
        'name' => 'nbyte',
        'type' => 'apr_size_t'
      },
      {
        'name' => 'copy',
        'type' => 'int'
      },
      {
        'name' => 'w',
        'type' => 'apr_size_t *'
      }
    ],
    'name' => 'apr_bucket_heap_create'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket *'
      },
      {
        'name' => 'buf',
        'type' => 'const char *'
      },
      {
        'name' => 'nbyte',
        'type' => 'apr_size_t'
      },
      {
        'name' => 'copy',
        'type' => 'int'
      },
      {
        'name' => 'w',
        'type' => 'apr_size_t *'
      }
    ],
    'name' => 'apr_bucket_heap_make'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'buf',
        'type' => 'const char *'
      },
      {
        'name' => 'length',
        'type' => 'apr_size_t'
      },
      {
        'name' => 'pool',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_bucket_pool_create'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket *'
      },
      {
        'name' => 'buf',
        'type' => 'const char *'
      },
      {
        'name' => 'length',
        'type' => 'apr_size_t'
      },
      {
        'name' => 'pool',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_bucket_pool_make'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'mm',
        'type' => 'apr_mmap_t *'
      },
      {
        'name' => 'start',
        'type' => 'apr_off_t'
      },
      {
        'name' => 'length',
        'type' => 'apr_size_t'
      }
    ],
    'name' => 'apr_bucket_mmap_create'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket *'
      },
      {
        'name' => 'mm',
        'type' => 'apr_mmap_t *'
      },
      {
        'name' => 'start',
        'type' => 'apr_off_t'
      },
      {
        'name' => 'length',
        'type' => 'apr_size_t'
      }
    ],
    'name' => 'apr_bucket_mmap_make'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'thissock',
        'type' => 'apr_socket_t *'
      }
    ],
    'name' => 'apr_bucket_socket_create'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket *'
      },
      {
        'name' => 'thissock',
        'type' => 'apr_socket_t *'
      }
    ],
    'name' => 'apr_bucket_socket_make'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'thispipe',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'apr_bucket_pipe_create'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket *'
      },
      {
        'name' => 'thispipe',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'apr_bucket_pipe_make'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'fd',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'offset',
        'type' => 'apr_off_t'
      },
      {
        'name' => 'len',
        'type' => 'apr_size_t'
      }
    ],
    'name' => 'apr_bucket_file_create'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket *'
      },
      {
        'name' => 'fd',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'offset',
        'type' => 'apr_off_t'
      },
      {
        'name' => 'len',
        'type' => 'apr_size_t'
      }
    ],
    'name' => 'apr_bucket_file_make'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'dbm',
        'type' => 'apr_dbm_t **'
      },
      {
        'name' => 'name',
        'type' => 'const char *'
      },
      {
        'name' => 'mode',
        'type' => 'int'
      },
      {
        'name' => 'cntxt',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_dbm_open'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'dbm',
        'type' => 'apr_dbm_t *'
      }
    ],
    'name' => 'apr_dbm_close'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'dbm',
        'type' => 'apr_dbm_t *'
      },
      {
        'name' => 'key',
        'type' => 'apr_datum_t'
      },
      {
        'name' => 'pvalue',
        'type' => 'apr_datum_t *'
      }
    ],
    'name' => 'apr_dbm_fetch'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'dbm',
        'type' => 'apr_dbm_t *'
      },
      {
        'name' => 'key',
        'type' => 'apr_datum_t'
      },
      {
        'name' => 'value',
        'type' => 'apr_datum_t'
      }
    ],
    'name' => 'apr_dbm_store'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'dbm',
        'type' => 'apr_dbm_t *'
      },
      {
        'name' => 'key',
        'type' => 'apr_datum_t'
      }
    ],
    'name' => 'apr_dbm_delete'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'dbm',
        'type' => 'apr_dbm_t *'
      },
      {
        'name' => 'key',
        'type' => 'apr_datum_t'
      }
    ],
    'name' => 'apr_dbm_exists'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'dbm',
        'type' => 'apr_dbm_t *'
      },
      {
        'name' => 'pkey',
        'type' => 'apr_datum_t *'
      }
    ],
    'name' => 'apr_dbm_firstkey'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'dbm',
        'type' => 'apr_dbm_t *'
      },
      {
        'name' => 'pkey',
        'type' => 'apr_datum_t *'
      }
    ],
    'name' => 'apr_dbm_nextkey'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'dbm',
        'type' => 'apr_dbm_t *'
      },
      {
        'name' => 'data',
        'type' => 'apr_datum_t'
      }
    ],
    'name' => 'apr_dbm_freedatum'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'dbm',
        'type' => 'apr_dbm_t *'
      },
      {
        'name' => 'errcode',
        'type' => 'int *'
      },
      {
        'name' => 'errbuf',
        'type' => 'char *'
      },
      {
        'name' => 'errbufsize',
        'type' => 'apr_size_t'
      }
    ],
    'name' => 'apr_dbm_geterror'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pool',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'pathname',
        'type' => 'const char *'
      },
      {
        'name' => 'used1',
        'type' => 'const char **'
      },
      {
        'name' => 'used2',
        'type' => 'const char **'
      }
    ],
    'name' => 'apr_dbm_get_usednames'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'arg1',
        'type' => 'void (*pfn)(void)'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'apr_hook_generic_add'
  },
  {
    'return_type' => 'apr_array_header_t *',
    'args' => [
      {
        'name' => 'szName',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_hook_generic_get'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'szHookName',
        'type' => 'const char *'
      },
      {
        'name' => 'aHooks',
        'type' => 'apr_array_header_t **'
      }
    ],
    'name' => 'apr_hook_sort_register'
  },
  {
    'return_type' => 'void',
    'args' => [],
    'name' => 'apr_sort_hooks'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      }
    ],
    'name' => 'apr_show_hook'
  },
  {
    'return_type' => 'void',
    'args' => [],
    'name' => 'apr_hook_deregister_all'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'clear',
        'type' => 'const char *'
      },
      {
        'name' => 'len',
        'type' => 'int'
      },
      {
        'name' => 'out',
        'type' => 'char *'
      }
    ],
    'name' => 'apr_sha1_base64'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'context',
        'type' => 'apr_sha1_ctx_t *'
      }
    ],
    'name' => 'apr_sha1_init'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'context',
        'type' => 'apr_sha1_ctx_t *'
      },
      {
        'name' => 'input',
        'type' => 'const char *'
      },
      {
        'name' => 'inputLen',
        'type' => 'unsigned int'
      }
    ],
    'name' => 'apr_sha1_update'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'context',
        'type' => 'apr_sha1_ctx_t *'
      },
      {
        'name' => 'input',
        'type' => 'const unsigned char *'
      },
      {
        'name' => 'inputLen',
        'type' => 'unsigned int'
      }
    ],
    'name' => 'apr_sha1_update_binary'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'digest',
        'type' => 'unsigned char'
      },
      {
        'name' => 'context',
        'type' => 'apr_sha1_ctx_t *'
      }
    ],
    'name' => 'apr_sha1_final'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'hdr',
        'type' => 'apr_text_header *'
      },
      {
        'name' => 'text',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_text_append'
  },
  {
    'return_type' => 'apr_xml_parser *',
    'args' => [
      {
        'name' => 'pool',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'apr_xml_parser_create'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'parser',
        'type' => 'apr_xml_parser *'
      },
      {
        'name' => 'data',
        'type' => 'const char *'
      },
      {
        'name' => 'len',
        'type' => 'apr_size_t'
      }
    ],
    'name' => 'apr_xml_parser_feed'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'parser',
        'type' => 'apr_xml_parser *'
      },
      {
        'name' => 'pdoc',
        'type' => 'apr_xml_doc **'
      }
    ],
    'name' => 'apr_xml_parser_done'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'parser',
        'type' => 'apr_xml_parser *'
      },
      {
        'name' => 'errbuf',
        'type' => 'char *'
      },
      {
        'name' => 'errbufsize',
        'type' => 'apr_size_t'
      }
    ],
    'name' => 'apr_xml_parser_geterror'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'elem',
        'type' => 'const apr_xml_elem *'
      },
      {
        'name' => 'style',
        'type' => 'int'
      },
      {
        'name' => 'namespaces',
        'type' => 'apr_array_header_t *'
      },
      {
        'name' => 'ns_map',
        'type' => 'int *'
      },
      {
        'name' => 'pbuf',
        'type' => 'const char **'
      },
      {
        'name' => 'psize',
        'type' => 'apr_size_t *'
      }
    ],
    'name' => 'apr_xml_to_text'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'elem',
        'type' => 'const apr_xml_elem *'
      }
    ],
    'name' => 'apr_xml_empty_elem'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 's',
        'type' => 'const char *'
      },
      {
        'name' => 'quotes',
        'type' => 'int'
      }
    ],
    'name' => 'apr_xml_quote_string'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'elem',
        'type' => 'apr_xml_elem *'
      }
    ],
    'name' => 'apr_xml_quote_elem'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'uri_array',
        'type' => 'apr_array_header_t *'
      },
      {
        'name' => 'uri',
        'type' => 'const char *'
      }
    ],
    'name' => 'apr_xml_insert_uri'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'pconf',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'plog',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'server_conf',
        'type' => 'server_rec *'
      }
    ],
    'name' => 'ap_mpm_run'
  },
  {
    'return_type' => 'int',
    'args' => [],
    'name' => 'ap_graceful_stop_signalled'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'r',
        'type' => 'const request_rec *'
      },
      {
        'name' => 'newproc',
        'type' => 'apr_proc_t *'
      },
      {
        'name' => 'progname',
        'type' => 'const char *'
      },
      {
        'name' => 'args',
        'type' => 'const char * const *'
      },
      {
        'name' => 'env',
        'type' => 'const char * const *'
      },
      {
        'name' => 'attr',
        'type' => 'apr_procattr_t *'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'ap_os_create_privileged_process'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'query_code',
        'type' => 'int'
      },
      {
        'name' => 'result',
        'type' => 'int *'
      }
    ],
    'name' => 'ap_mpm_query'
  },
  {
    'return_type' => 'ap_directive_t *',
    'args' => [
      {
        'name' => 'parent',
        'type' => 'ap_directive_t **'
      },
      {
        'name' => 'current',
        'type' => 'ap_directive_t *'
      },
      {
        'name' => 'toadd',
        'type' => 'ap_directive_t *'
      },
      {
        'name' => 'child',
        'type' => 'int'
      }
    ],
    'name' => 'ap_add_node'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'cmd',
        'type' => 'cmd_parms *'
      },
      {
        'name' => 'struct_ptr',
        'type' => 'void *'
      },
      {
        'name' => 'arg',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_set_string_slot'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'cmd',
        'type' => 'cmd_parms *'
      },
      {
        'name' => 'struct_ptr',
        'type' => 'void *'
      },
      {
        'name' => 'arg',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_set_int_slot'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'cmd',
        'type' => 'cmd_parms *'
      },
      {
        'name' => 'method',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_method_is_limited'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'cmd',
        'type' => 'cmd_parms *'
      },
      {
        'name' => 'struct_ptr',
        'type' => 'void *'
      },
      {
        'name' => 'arg',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_set_string_slot_lower'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'cmd',
        'type' => 'cmd_parms *'
      },
      {
        'name' => 'struct_ptr',
        'type' => 'void *'
      },
      {
        'name' => 'arg',
        'type' => 'int'
      }
    ],
    'name' => 'ap_set_flag_slot'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'cmd',
        'type' => 'cmd_parms *'
      },
      {
        'name' => 'struct_ptr',
        'type' => 'void *'
      },
      {
        'name' => 'arg',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_set_file_slot'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'fname',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_server_root_relative'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'm',
        'type' => 'module *'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'ap_add_module'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'm',
        'type' => 'module *'
      }
    ],
    'name' => 'ap_remove_module'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'mod',
        'type' => 'module *'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'ap_add_loaded_module'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'mod',
        'type' => 'module *'
      }
    ],
    'name' => 'ap_remove_loaded_module'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'name',
        'type' => 'const char *'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'ap_add_named_module'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'm',
        'type' => 'module *'
      }
    ],
    'name' => 'ap_find_module_name'
  },
  {
    'return_type' => 'module *',
    'args' => [
      {
        'name' => 'name',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_find_linked_module'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'ret_cfg',
        'type' => 'ap_configfile_t **'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'name',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_pcfg_openfile'
  },
  {
    'return_type' => 'ap_configfile_t *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'descr',
        'type' => 'const char *'
      },
      {
        'name' => 'param',
        'type' => 'void *'
      },
      {
        'name' => 'arg3',
        'type' => 'int(*getc_func)(void*)'
      },
      {
        'name' => 'arg4',
        'type' => 'void *(*gets_func) (void *buf, size_t bufsiz, void *param)'
      },
      {
        'name' => 'arg5',
        'type' => 'int(*close_func)(void *param)'
      }
    ],
    'name' => 'ap_pcfg_open_custom'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'buf',
        'type' => 'char *'
      },
      {
        'name' => 'bufsize',
        'type' => 'size_t'
      },
      {
        'name' => 'cfp',
        'type' => 'ap_configfile_t *'
      }
    ],
    'name' => 'ap_cfg_getline'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'cfp',
        'type' => 'ap_configfile_t *'
      }
    ],
    'name' => 'ap_cfg_getc'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'cfp',
        'type' => 'ap_configfile_t *'
      }
    ],
    'name' => 'ap_cfg_closefile'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'cmd',
        'type' => 'cmd_parms *'
      },
      {
        'name' => 'directive',
        'type' => 'char *'
      }
    ],
    'name' => 'ap_soak_end_container'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'temp_pool',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'parms',
        'type' => 'cmd_parms *'
      },
      {
        'name' => 'current',
        'type' => 'ap_directive_t **'
      },
      {
        'name' => 'curr_parent',
        'type' => 'ap_directive_t **'
      },
      {
        'name' => 'orig_directive',
        'type' => 'char *'
      }
    ],
    'name' => 'ap_build_cont_config'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'parms',
        'type' => 'cmd_parms *'
      },
      {
        'name' => 'conf_pool',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'temp_pool',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'conftree',
        'type' => 'ap_directive_t **'
      }
    ],
    'name' => 'ap_build_config'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'conftree',
        'type' => 'ap_directive_t *'
      },
      {
        'name' => 'parms',
        'type' => 'cmd_parms *'
      },
      {
        'name' => 'section_vector',
        'type' => 'ap_conf_vector_t *'
      }
    ],
    'name' => 'ap_walk_config'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'cmd',
        'type' => 'cmd_parms *'
      },
      {
        'name' => 'forbidden',
        'type' => 'unsigned'
      }
    ],
    'name' => 'ap_check_cmd_context'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 's',
        'type' => 'server_rec *'
      },
      {
        'name' => 'm',
        'type' => 'module *'
      }
    ],
    'name' => 'ap_single_module_configure'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'process',
        'type' => 'process_rec *'
      }
    ],
    'name' => 'ap_setup_prelinked_modules'
  },
  {
    'return_type' => 'void',
    'args' => [],
    'name' => 'ap_show_directives'
  },
  {
    'return_type' => 'void',
    'args' => [],
    'name' => 'ap_show_modules'
  },
  {
    'return_type' => 'const char *',
    'args' => [],
    'name' => 'ap_show_mpm'
  },
  {
    'return_type' => 'server_rec *',
    'args' => [
      {
        'name' => 'process',
        'type' => 'process_rec *'
      },
      {
        'name' => 'temp_pool',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'config_name',
        'type' => 'const char *'
      },
      {
        'name' => 'conftree',
        'type' => 'ap_directive_t **'
      }
    ],
    'name' => 'ap_read_config'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'process',
        'type' => 'process_rec *'
      }
    ],
    'name' => 'ap_run_rewrite_args'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'm',
        'type' => 'module *'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'ap_register_hooks'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'main_server',
        'type' => 'server_rec *'
      }
    ],
    'name' => 'ap_fixup_virtual_hosts'
  },
  {
    'return_type' => 'ap_conf_vector_t *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'ap_create_request_config'
  },
  {
    'return_type' => 'ap_conf_vector_t *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'base',
        'type' => 'ap_conf_vector_t *'
      },
      {
        'name' => 'new_conf',
        'type' => 'ap_conf_vector_t *'
      }
    ],
    'name' => 'ap_merge_per_dir_configs'
  },
  {
    'return_type' => 'ap_conf_vector_t *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'ap_create_conn_config'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'result',
        'type' => 'ap_conf_vector_t **'
      },
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'override',
        'type' => 'int'
      },
      {
        'name' => 'path',
        'type' => 'const char *'
      },
      {
        'name' => 'access_name',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_parse_htaccess'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 's',
        'type' => 'server_rec *'
      },
      {
        'name' => 'fname',
        'type' => 'const char *'
      },
      {
        'name' => 'conftree',
        'type' => 'ap_directive_t **'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'ptemp',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'ap_process_resource_config'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 's',
        'type' => 'server_rec *'
      },
      {
        'name' => 'conftree',
        'type' => 'ap_directive_t *'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'ptemp',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'ap_process_config_tree'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'arg0',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_invoke_handler'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_header_parser_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_header_parser'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_run_header_parser'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_pre_config_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_pre_config'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pconf',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'plog',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'ptemp',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'ap_run_pre_config'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_post_config_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_post_config'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pconf',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'plog',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'ptemp',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 's',
        'type' => 'server_rec *'
      }
    ],
    'name' => 'ap_run_post_config'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_open_logs_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_open_logs'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pconf',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'plog',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'ptemp',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 's',
        'type' => 'server_rec *'
      }
    ],
    'name' => 'ap_run_open_logs'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_child_init_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_child_init'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pchild',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 's',
        'type' => 'server_rec *'
      }
    ],
    'name' => 'ap_run_child_init'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_handler_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_handler'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_run_handler'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_quick_handler_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_quick_handler'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_run_quick_handler'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_optional_fn_retrieve_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_optional_fn_retrieve'
  },
  {
    'return_type' => 'void',
    'args' => [],
    'name' => 'ap_run_optional_fn_retrieve'
  },
  {
    'return_type' => 'conn_rec *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'server',
        'type' => 'server_rec *'
      },
      {
        'name' => 'inout',
        'type' => 'apr_socket_t *'
      },
      {
        'name' => 'id',
        'type' => 'long'
      }
    ],
    'name' => 'ap_new_connection'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'arg0',
        'type' => 'conn_rec *'
      }
    ],
    'name' => 'ap_lingering_close'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_pre_connection_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_pre_connection'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'c',
        'type' => 'conn_rec *'
      }
    ],
    'name' => 'ap_run_pre_connection'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_process_connection_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_process_connection'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'c',
        'type' => 'conn_rec *'
      }
    ],
    'name' => 'ap_run_process_connection'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_allow_options'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_allow_overrides'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_default_type'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_document_root'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'conn',
        'type' => 'conn_rec *'
      },
      {
        'name' => 'dir_config',
        'type' => 'void *'
      },
      {
        'name' => 'type',
        'type' => 'int'
      },
      {
        'name' => 'str_is_ip',
        'type' => 'int *'
      }
    ],
    'name' => 'ap_get_remote_host'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_get_remote_logname'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'uri',
        'type' => 'const char *'
      },
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_construct_url'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_get_server_name'
  },
  {
    'return_type' => 'apr_port_t',
    'args' => [
      {
        'name' => 'r',
        'type' => 'const request_rec *'
      }
    ],
    'name' => 'ap_get_server_port'
  },
  {
    'return_type' => 'unsigned long',
    'args' => [
      {
        'name' => 'r',
        'type' => 'const request_rec *'
      }
    ],
    'name' => 'ap_get_limit_req_body'
  },
  {
    'return_type' => 'size_t',
    'args' => [
      {
        'name' => 'r',
        'type' => 'const request_rec *'
      }
    ],
    'name' => 'ap_get_limit_xml_body'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'status',
        'type' => 'int'
      },
      {
        'name' => 'string',
        'type' => 'char *'
      }
    ],
    'name' => 'ap_custom_response'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'name',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_exists_config_define'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_core_translate'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_auth_type'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_auth_name'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_satisfies'
  },
  {
    'return_type' => 'const apr_array_header_t *',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_requires'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'arg0',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'arg1',
        'type' => 'server_rec *'
      }
    ],
    'name' => 'ap_core_reorder_directories'
  },
  {
    'return_type' => 'const char *',
    'args' => [],
    'name' => 'ap_get_server_version'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pconf',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'component',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_add_version_component'
  },
  {
    'return_type' => 'const char *',
    'args' => [],
    'name' => 'ap_get_server_built'
  },
  {
    'return_type' => 'apr_port_t',
    'args' => [
      {
        'name' => 'scheme_str',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_default_port_for_scheme'
  },
  {
    'return_type' => 'apr_port_t',
    'args' => [
      {
        'name' => 'r',
        'type' => 'const request_rec *'
      }
    ],
    'name' => 'ap_default_port_for_request'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'uptr',
        'type' => 'const uri_components *'
      },
      {
        'name' => 'flags',
        'type' => 'unsigned'
      }
    ],
    'name' => 'ap_unparse_uri_components'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'uri',
        'type' => 'const char *'
      },
      {
        'name' => 'uptr',
        'type' => 'uri_components *'
      }
    ],
    'name' => 'ap_parse_uri_components'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'hostinfo',
        'type' => 'const char *'
      },
      {
        'name' => 'uptr',
        'type' => 'uri_components *'
      }
    ],
    'name' => 'ap_parse_hostinfo_components'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'intype',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_field_noparam'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 't',
        'type' => 'apr_time_t'
      },
      {
        'name' => 'fmt',
        'type' => 'const char *'
      },
      {
        'name' => 'gmt',
        'type' => 'int'
      }
    ],
    'name' => 'ap_ht_time'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'line',
        'type' => 'const char **'
      },
      {
        'name' => 'stop',
        'type' => 'char'
      }
    ],
    'name' => 'ap_getword'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'line',
        'type' => 'char **'
      },
      {
        'name' => 'stop',
        'type' => 'char'
      }
    ],
    'name' => 'ap_getword_nc'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'line',
        'type' => 'const char **'
      }
    ],
    'name' => 'ap_getword_white'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'line',
        'type' => 'char **'
      }
    ],
    'name' => 'ap_getword_white_nc'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'line',
        'type' => 'const char **'
      },
      {
        'name' => 'stop',
        'type' => 'char'
      }
    ],
    'name' => 'ap_getword_nulls'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'line',
        'type' => 'char **'
      },
      {
        'name' => 'stop',
        'type' => 'char'
      }
    ],
    'name' => 'ap_getword_nulls_nc'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'line',
        'type' => 'const char **'
      }
    ],
    'name' => 'ap_getword_conf'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'line',
        'type' => 'char **'
      }
    ],
    'name' => 'ap_getword_conf_nc'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'word',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_resolve_env'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'field',
        'type' => 'const char **'
      },
      {
        'name' => 'len',
        'type' => 'int *'
      }
    ],
    'name' => 'ap_size_list_item'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'field',
        'type' => 'const char **'
      }
    ],
    'name' => 'ap_get_list_item'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'line',
        'type' => 'const char *'
      },
      {
        'name' => 'tok',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_find_list_item'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'accept_line',
        'type' => 'const char **'
      },
      {
        'name' => 'accept_white',
        'type' => 'int'
      }
    ],
    'name' => 'ap_get_token'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'line',
        'type' => 'const char *'
      },
      {
        'name' => 'tok',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_find_token'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'line',
        'type' => 'const char *'
      },
      {
        'name' => 'tok',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_find_last_token'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'u',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_is_url'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'url',
        'type' => 'char *'
      }
    ],
    'name' => 'ap_unescape_url'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'name',
        'type' => 'char *'
      }
    ],
    'name' => 'ap_no2slash'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'name',
        'type' => 'char *'
      }
    ],
    'name' => 'ap_getparents'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 's',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_escape_path_segment'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'path',
        'type' => 'const char *'
      },
      {
        'name' => 'partial',
        'type' => 'int'
      }
    ],
    'name' => 'ap_os_escape_path'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 's',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_escape_html'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'hostname',
        'type' => 'const char *'
      },
      {
        'name' => 'port',
        'type' => 'apr_port_t'
      },
      {
        'name' => 'r',
        'type' => 'const request_rec *'
      }
    ],
    'name' => 'ap_construct_server'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 's',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_escape_shell_cmd'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'path',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_count_dirs'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'd',
        'type' => 'char *'
      },
      {
        'name' => 's',
        'type' => 'const char *'
      },
      {
        'name' => 'n',
        'type' => 'int'
      }
    ],
    'name' => 'ap_make_dirstr_prefix'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 's',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_make_dirstr_parent'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'a',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'dir',
        'type' => 'const char *'
      },
      {
        'name' => 'f',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_make_full_path'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'str',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_is_matchexp'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'str',
        'type' => 'const char *'
      },
      {
        'name' => 'exp',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_strcmp_match'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'str',
        'type' => 'const char *'
      },
      {
        'name' => 'exp',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_strcasecmp_match'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 's1',
        'type' => 'const char *'
      },
      {
        'name' => 's2',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_strcasestr'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'bigstring',
        'type' => 'const char *'
      },
      {
        'name' => 'prefix',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_stripprefix'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'bufcoded',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_pbase64decode'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'string',
        'type' => 'char *'
      }
    ],
    'name' => 'ap_pbase64encode'
  },
  {
    'return_type' => 'regex_t *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'pattern',
        'type' => 'const char *'
      },
      {
        'name' => 'cflags',
        'type' => 'int'
      }
    ],
    'name' => 'ap_pregcomp'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'reg',
        'type' => 'regex_t *'
      }
    ],
    'name' => 'ap_pregfree'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'preg',
        'type' => 'regex_t *'
      },
      {
        'name' => 'string',
        'type' => 'const char *'
      },
      {
        'name' => 'nmatch',
        'type' => 'size_t'
      },
      {
        'name' => 'pmatch',
        'type' => 'regmatch_t'
      },
      {
        'name' => 'eflags',
        'type' => 'int'
      }
    ],
    'name' => 'ap_regexec'
  },
  {
    'return_type' => 'size_t',
    'args' => [
      {
        'name' => 'errcode',
        'type' => 'int'
      },
      {
        'name' => 'preg',
        'type' => 'const regex_t *'
      },
      {
        'name' => 'errbuf',
        'type' => 'char *'
      },
      {
        'name' => 'errbuf_size',
        'type' => 'size_t'
      }
    ],
    'name' => 'ap_regerror'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'input',
        'type' => 'const char *'
      },
      {
        'name' => 'source',
        'type' => 'const char *'
      },
      {
        'name' => 'nmatch',
        'type' => 'size_t'
      },
      {
        'name' => 'pmatch',
        'type' => 'regmatch_t'
      }
    ],
    'name' => 'ap_pregsub'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 's',
        'type' => 'char *'
      }
    ],
    'name' => 'ap_content_type_tolower'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 's',
        'type' => 'char *'
      }
    ],
    'name' => 'ap_str_tolower'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'str',
        'type' => 'const char *'
      },
      {
        'name' => 'c',
        'type' => 'char'
      }
    ],
    'name' => 'ap_ind'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'str',
        'type' => 'const char *'
      },
      {
        'name' => 'c',
        'type' => 'char'
      }
    ],
    'name' => 'ap_rind'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'instring',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_escape_quotes'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'name',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_is_rdirectory'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'name',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_is_directory'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'ap_get_local_host'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'szExp',
        'type' => 'const char *'
      },
      {
        'name' => 'szFile',
        'type' => 'const char *'
      },
      {
        'name' => 'nLine',
        'type' => 'int'
      }
    ],
    'name' => 'ap_log_assert'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'prefix',
        'type' => 'const char *'
      },
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_psignature'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'ap_open_stderr_log'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 's_main',
        'type' => 'server_rec *'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'ap_open_logs'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'file',
        'type' => 'const char *'
      },
      {
        'name' => 'line',
        'type' => 'int'
      },
      {
        'name' => 'level',
        'type' => 'int'
      },
      {
        'name' => 'status',
        'type' => 'apr_status_t'
      },
      {
        'name' => 's',
        'type' => 'const server_rec *'
      },
      {
        'name' => 'fmt',
        'type' => 'const char *'
      },
      {
        'name' => 'arg6',
        'type' => '...'
      }
    ],
    'name' => 'ap_log_error'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'file',
        'type' => 'const char *'
      },
      {
        'name' => 'line',
        'type' => 'int'
      },
      {
        'name' => 'level',
        'type' => 'int'
      },
      {
        'name' => 'status',
        'type' => 'apr_status_t'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'fmt',
        'type' => 'const char *'
      },
      {
        'name' => 'arg6',
        'type' => '...'
      }
    ],
    'name' => 'ap_log_perror'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'file',
        'type' => 'const char *'
      },
      {
        'name' => 'line',
        'type' => 'int'
      },
      {
        'name' => 'level',
        'type' => 'int'
      },
      {
        'name' => 'status',
        'type' => 'apr_status_t'
      },
      {
        'name' => 's',
        'type' => 'const request_rec *'
      },
      {
        'name' => 'fmt',
        'type' => 'const char *'
      },
      {
        'name' => 'arg6',
        'type' => '...'
      }
    ],
    'name' => 'ap_log_rerror'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 's',
        'type' => 'server_rec *'
      }
    ],
    'name' => 'ap_error_log2stderr'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'fname',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_log_pid'
  },
  {
    'return_type' => 'piped_log *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'program',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_open_piped_log'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pl',
        'type' => 'piped_log *'
      }
    ],
    'name' => 'ap_close_piped_log'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'filter',
        'type' => 'ap_filter_t *'
      },
      {
        'name' => 'bucket',
        'type' => 'apr_bucket_brigade *'
      },
      {
        'name' => 'mode',
        'type' => 'ap_input_mode_t'
      },
      {
        'name' => 'readbytes',
        'type' => 'apr_size_t *'
      }
    ],
    'name' => 'ap_get_brigade'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'filter',
        'type' => 'ap_filter_t *'
      },
      {
        'name' => 'bucket',
        'type' => 'apr_bucket_brigade *'
      }
    ],
    'name' => 'ap_pass_brigade'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'name',
        'type' => 'const char *'
      },
      {
        'name' => 'filter_func',
        'type' => 'ap_in_filter_func'
      },
      {
        'name' => 'ftype',
        'type' => 'ap_filter_type'
      }
    ],
    'name' => 'ap_register_input_filter'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'name',
        'type' => 'const char *'
      },
      {
        'name' => 'filter_func',
        'type' => 'ap_out_filter_func'
      },
      {
        'name' => 'ftype',
        'type' => 'ap_filter_type'
      }
    ],
    'name' => 'ap_register_output_filter'
  },
  {
    'return_type' => 'ap_filter_t *',
    'args' => [
      {
        'name' => 'name',
        'type' => 'const char *'
      },
      {
        'name' => 'ctx',
        'type' => 'void *'
      },
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'c',
        'type' => 'conn_rec *'
      }
    ],
    'name' => 'ap_add_input_filter'
  },
  {
    'return_type' => 'ap_filter_t *',
    'args' => [
      {
        'name' => 'name',
        'type' => 'const char *'
      },
      {
        'name' => 'ctx',
        'type' => 'void *'
      },
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'c',
        'type' => 'conn_rec *'
      }
    ],
    'name' => 'ap_add_output_filter'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'f',
        'type' => 'ap_filter_t *'
      }
    ],
    'name' => 'ap_remove_output_filter'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'f',
        'type' => 'ap_filter_t *'
      },
      {
        'name' => 'save_to',
        'type' => 'apr_bucket_brigade **'
      },
      {
        'name' => 'b',
        'type' => 'apr_bucket_brigade **'
      }
    ],
    'name' => 'ap_save_brigade'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'bb',
        'type' => 'apr_bucket_brigade *'
      },
      {
        'name' => 'ctx',
        'type' => 'void *'
      }
    ],
    'name' => 'ap_filter_flush'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'f',
        'type' => 'ap_filter_t *'
      },
      {
        'name' => 'bb',
        'type' => 'apr_bucket_brigade *'
      }
    ],
    'name' => 'ap_fflush'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'f',
        'type' => 'ap_filter_t *'
      },
      {
        'name' => 'bb',
        'type' => 'apr_bucket_brigade *'
      },
      {
        'name' => 'arg2',
        'type' => '...'
      }
    ],
    'name' => 'ap_fputstrs'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'f',
        'type' => 'ap_filter_t *'
      },
      {
        'name' => 'bb',
        'type' => 'apr_bucket_brigade *'
      },
      {
        'name' => 'fmt',
        'type' => 'const char *'
      },
      {
        'name' => 'arg3',
        'type' => '...'
      }
    ],
    'name' => 'ap_fprintf'
  },
  {
    'return_type' => 'request_rec *',
    'args' => [
      {
        'name' => 'c',
        'type' => 'conn_rec *'
      }
    ],
    'name' => 'ap_read_request'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_finalize_request_protocol'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'recursive_error',
        'type' => 'int'
      }
    ],
    'name' => 'ap_send_error_response'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'length',
        'type' => 'apr_off_t'
      }
    ],
    'name' => 'ap_set_content_length'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_set_keepalive'
  },
  {
    'return_type' => 'apr_time_t',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'mtime',
        'type' => 'apr_time_t'
      }
    ],
    'name' => 'ap_rationalize_mtime'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'type',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_make_content_type'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'force_weak',
        'type' => 'int'
      }
    ],
    'name' => 'ap_make_etag'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_set_etag'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_set_last_modified'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_meets_conditions'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'fd',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'offset',
        'type' => 'apr_off_t'
      },
      {
        'name' => 'length',
        'type' => 'apr_size_t'
      },
      {
        'name' => 'nbytes',
        'type' => 'apr_size_t *'
      }
    ],
    'name' => 'ap_send_fd'
  },
  {
    'return_type' => 'size_t',
    'args' => [
      {
        'name' => 'mm',
        'type' => 'apr_mmap_t *'
      },
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'offset',
        'type' => 'size_t'
      },
      {
        'name' => 'length',
        'type' => 'size_t'
      }
    ],
    'name' => 'ap_send_mmap'
  },
  {
    'return_type' => 'ap_method_list_t *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'nelts',
        'type' => 'int'
      }
    ],
    'name' => 'ap_make_method_list'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'dest',
        'type' => 'ap_method_list_t *'
      },
      {
        'name' => 'src',
        'type' => 'ap_method_list_t *'
      }
    ],
    'name' => 'ap_copy_method_list'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'arg0',
        'type' => 'int (*comp) (void *urec, const char *mname,
                                                       int mnum)'
      },
      {
        'name' => 'rec',
        'type' => 'void *'
      },
      {
        'name' => 'ml',
        'type' => 'const ap_method_list_t *'
      },
      {
        'name' => 'arg3',
        'type' => '...'
      }
    ],
    'name' => 'ap_method_list_do'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'arg0',
        'type' => 'int (*comp) (void *urec, const char *mname,
                                                 int mnum)'
      },
      {
        'name' => 'rec',
        'type' => 'void *'
      },
      {
        'name' => 'ml',
        'type' => 'const ap_method_list_t *'
      },
      {
        'name' => 'vp',
        'type' => 'va_list'
      }
    ],
    'name' => 'ap_method_list_vdo'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'l',
        'type' => 'ap_method_list_t *'
      },
      {
        'name' => 'method',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_method_in_list'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'l',
        'type' => 'ap_method_list_t *'
      },
      {
        'name' => 'method',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_method_list_add'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'l',
        'type' => 'ap_method_list_t *'
      },
      {
        'name' => 'method',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_method_list_remove'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'l',
        'type' => 'ap_method_list_t *'
      }
    ],
    'name' => 'ap_clear_method_list'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'c',
        'type' => 'int'
      },
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_rputc'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'str',
        'type' => 'const char *'
      },
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_rputs'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'buf',
        'type' => 'const void *'
      },
      {
        'name' => 'nbyte',
        'type' => 'int'
      },
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_rwrite'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'arg1',
        'type' => '...'
      }
    ],
    'name' => 'ap_rvputs'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'fmt',
        'type' => 'const char *'
      },
      {
        'name' => 'vlist',
        'type' => 'va_list'
      }
    ],
    'name' => 'ap_vrprintf'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'fmt',
        'type' => 'const char *'
      },
      {
        'name' => 'arg2',
        'type' => '...'
      }
    ],
    'name' => 'ap_rprintf'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_rflush'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'status',
        'type' => 'int'
      }
    ],
    'name' => 'ap_index_of_response'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'status',
        'type' => 'int'
      }
    ],
    'name' => 'ap_get_status_line'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'read_policy',
        'type' => 'int'
      }
    ],
    'name' => 'ap_setup_client_block'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_should_client_block'
  },
  {
    'return_type' => 'long',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'buffer',
        'type' => 'char *'
      },
      {
        'name' => 'bufsiz',
        'type' => 'int'
      }
    ],
    'name' => 'ap_get_client_block'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_discard_request_body'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_note_auth_failure'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_note_basic_auth_failure'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_note_digest_auth_failure'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'pw',
        'type' => 'const char **'
      }
    ],
    'name' => 'ap_get_basic_auth_pw'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'uri',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_parse_uri'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 's',
        'type' => 'char *'
      },
      {
        'name' => 'n',
        'type' => 'int'
      },
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'fold',
        'type' => 'int'
      }
    ],
    'name' => 'ap_getline'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'method',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_method_number_of'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'methnum',
        'type' => 'int'
      }
    ],
    'name' => 'ap_method_name_of'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_post_read_request_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_post_read_request'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_run_post_read_request'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_log_transaction_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_log_transaction'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_run_log_transaction'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_http_method_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_http_method'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'r',
        'type' => 'const request_rec *'
      }
    ],
    'name' => 'ap_run_http_method'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_default_port_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_default_port'
  },
  {
    'return_type' => 'apr_port_t',
    'args' => [
      {
        'name' => 'r',
        'type' => 'const request_rec *'
      }
    ],
    'name' => 'ap_run_default_port'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'b',
        'type' => 'apr_bucket *'
      },
      {
        'name' => 'error',
        'type' => 'int'
      },
      {
        'name' => 'buf',
        'type' => 'const char *'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'ap_bucket_error_make'
  },
  {
    'return_type' => 'apr_bucket *',
    'args' => [
      {
        'name' => 'error',
        'type' => 'int'
      },
      {
        'name' => 'buf',
        'type' => 'const char *'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'ap_bucket_error_create'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'f',
        'type' => 'ap_filter_t *'
      },
      {
        'name' => 'b',
        'type' => 'apr_bucket_brigade *'
      }
    ],
    'name' => 'ap_byterange_filter'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'f',
        'type' => 'ap_filter_t *'
      },
      {
        'name' => 'b',
        'type' => 'apr_bucket_brigade *'
      }
    ],
    'name' => 'ap_http_header_filter'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'arg0',
        'type' => 'ap_filter_t *'
      },
      {
        'name' => 'arg1',
        'type' => 'apr_bucket_brigade *'
      }
    ],
    'name' => 'ap_content_length_filter'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'f',
        'type' => 'ap_filter_t *'
      },
      {
        'name' => 'b',
        'type' => 'apr_bucket_brigade *'
      }
    ],
    'name' => 'ap_old_write_filter'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'rnew',
        'type' => 'request_rec *'
      },
      {
        'name' => 'r',
        'type' => 'const request_rec *'
      }
    ],
    'name' => 'ap_set_sub_req_protocol'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'sub_r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_finalize_sub_req_protocol'
  },
  {
    'return_type' => 'request_rec *',
    'args' => [
      {
        'name' => 'new_file',
        'type' => 'const char *'
      },
      {
        'name' => 'r',
        'type' => 'const request_rec *'
      },
      {
        'name' => 'next_filter',
        'type' => 'ap_filter_t *'
      }
    ],
    'name' => 'ap_sub_req_lookup_uri'
  },
  {
    'return_type' => 'request_rec *',
    'args' => [
      {
        'name' => 'new_file',
        'type' => 'const char *'
      },
      {
        'name' => 'r',
        'type' => 'const request_rec *'
      },
      {
        'name' => 'next_filter',
        'type' => 'ap_filter_t *'
      }
    ],
    'name' => 'ap_sub_req_lookup_file'
  },
  {
    'return_type' => 'request_rec *',
    'args' => [
      {
        'name' => 'method',
        'type' => 'const char *'
      },
      {
        'name' => 'new_file',
        'type' => 'const char *'
      },
      {
        'name' => 'r',
        'type' => 'const request_rec *'
      },
      {
        'name' => 'next_filter',
        'type' => 'ap_filter_t *'
      }
    ],
    'name' => 'ap_sub_req_method_uri'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'f',
        'type' => 'ap_filter_t *'
      },
      {
        'name' => 'bb',
        'type' => 'apr_bucket_brigade *'
      }
    ],
    'name' => 'ap_sub_req_output_filter'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_run_sub_req'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_destroy_sub_req'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'new_uri',
        'type' => 'const char *'
      },
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_internal_redirect'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'new_uri',
        'type' => 'const char *'
      },
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_internal_redirect_handler'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_some_auth_required'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_is_initial_req'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'dependency_mtime',
        'type' => 'apr_time_t'
      }
    ],
    'name' => 'ap_update_mtime'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'reset',
        'type' => 'int'
      },
      {
        'name' => 'arg2',
        'type' => '...'
      }
    ],
    'name' => 'ap_allow_methods'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'arg0',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_process_request'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'type',
        'type' => 'int'
      },
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_die'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_create_request_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_create_request'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_run_create_request'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_translate_name_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_translate_name'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_run_translate_name'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_check_user_id_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_check_user_id'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_run_check_user_id'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_fixups_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_fixups'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_run_fixups'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_type_checker_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_type_checker'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_run_type_checker'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_access_checker_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_access_checker'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_run_access_checker'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_auth_checker_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_auth_checker'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_run_auth_checker'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_insert_filter_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_insert_filter'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_run_insert_filter'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'ap_init_vhost_config'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'main_server',
        'type' => 'server_rec *'
      }
    ],
    'name' => 'ap_fini_vhost_config'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'hostname',
        'type' => 'const char *'
      },
      {
        'name' => 's',
        'type' => 'server_rec *'
      }
    ],
    'name' => 'ap_parse_vhost_addrs'
  },
  {
    'return_type' => 'const char *',
    'args' => [
      {
        'name' => 'cmd',
        'type' => 'cmd_parms *'
      },
      {
        'name' => 'dummy',
        'type' => 'void *'
      },
      {
        'name' => 'arg',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_set_name_virtual_host'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'conn',
        'type' => 'conn_rec *'
      }
    ],
    'name' => 'ap_update_vhost_given_ip'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_update_vhost_from_headers'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'host',
        'type' => 'const char *'
      },
      {
        'name' => 'port',
        'type' => 'apr_port_t'
      }
    ],
    'name' => 'ap_matches_request_vhost'
  },
  {
    'return_type' => 'int',
    'args' => [],
    'name' => 'ap_exists_scoreboard_image'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 't',
        'type' => 'ap_scoreboard_e'
      }
    ],
    'name' => 'ap_create_scoreboard'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'child_num',
        'type' => 'int'
      },
      {
        'name' => 'thread_num',
        'type' => 'int'
      },
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_increment_counts'
  },
  {
    'return_type' => 'apr_status_t',
    'args' => [
      {
        'name' => 'd',
        'type' => 'void *'
      }
    ],
    'name' => 'ap_cleanup_scoreboard'
  },
  {
    'return_type' => 'void',
    'args' => [],
    'name' => 'ap_sync_scoreboard_image'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'child_num',
        'type' => 'int'
      },
      {
        'name' => 'thread_num',
        'type' => 'int'
      },
      {
        'name' => 'status',
        'type' => 'int'
      },
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_update_child_status'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'child_num',
        'type' => 'int'
      },
      {
        'name' => 'thread_num',
        'type' => 'int'
      },
      {
        'name' => 'status',
        'type' => 'int'
      }
    ],
    'name' => 'ap_time_process_request'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pf',
        'type' => 'ap_HOOK_get_suexec_identity_t *'
      },
      {
        'name' => 'aszPre',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSucc',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'name' => 'ap_hook_get_suexec_identity'
  },
  {
    'return_type' => 'ap_unix_identity_t *',
    'args' => [
      {
        'name' => 'r',
        'type' => 'const request_rec *'
      }
    ],
    'name' => 'ap_run_get_suexec_identity'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'terminate',
        'type' => 'int'
      }
    ],
    'name' => 'ap_reclaim_child_processes'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'status',
        'type' => 'int *'
      },
      {
        'name' => 'ret',
        'type' => 'apr_proc_t *'
      },
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      }
    ],
    'name' => 'ap_wait_or_timeout'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'pid',
        'type' => 'apr_proc_t *'
      },
      {
        'name' => 'status',
        'type' => 'int'
      }
    ],
    'name' => 'ap_process_child_status'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 's',
        'type' => 'apr_socket_t *'
      }
    ],
    'name' => 'ap_sock_disable_nagle'
  },
  {
    'return_type' => 'uid_t',
    'args' => [
      {
        'name' => 'name',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_uname2id'
  },
  {
    'return_type' => 'gid_t',
    'args' => [
      {
        'name' => 'name',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_gname2id'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'conn',
        'type' => 'conn_rec *'
      },
      {
        'name' => 'srv',
        'type' => 'server_rec *'
      }
    ],
    'name' => 'ap_rfc1413'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'data',
        'type' => 'const char *'
      },
      {
        'name' => 'mask',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_checkmask'
  },
  {
    'return_type' => 'apr_time_t',
    'args' => [
      {
        'name' => 'date',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_parseHTTPdate'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'a',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'string',
        'type' => 'const unsigned char *'
      }
    ],
    'name' => 'ap_md5'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'a',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'buf',
        'type' => 'const unsigned char *'
      },
      {
        'name' => 'len',
        'type' => 'int'
      }
    ],
    'name' => 'ap_md5_binary'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'context',
        'type' => 'apr_md5_ctx_t *'
      }
    ],
    'name' => 'ap_md5contextTo64'
  },
  {
    'return_type' => 'char *',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'infile',
        'type' => 'apr_file_t *'
      }
    ],
    'name' => 'ap_md5digest'
  },
  {
    'return_type' => 'char **',
    'args' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 't',
        'type' => 'apr_table_t *'
      }
    ],
    'name' => 'ap_create_environment'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'uri',
        'type' => 'const char *'
      },
      {
        'name' => 'path_info',
        'type' => 'const char *'
      }
    ],
    'name' => 'ap_find_path_info'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_add_cgi_vars'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_add_common_vars'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'f',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'buffer',
        'type' => 'char *'
      }
    ],
    'name' => 'ap_scan_script_header_err'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'buffer',
        'type' => 'char *'
      },
      {
        'name' => 'termch',
        'type' => 'const char **'
      },
      {
        'name' => 'termarg',
        'type' => 'int *'
      },
      {
        'name' => 'arg4',
        'type' => '...'
      }
    ],
    'name' => 'ap_scan_script_header_err_strs'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'buffer',
        'type' => 'char *'
      },
      {
        'name' => 'arg2',
        'type' => 'int (*getsfunc) (char *, int, void *)'
      },
      {
        'name' => 'getsfunc_data',
        'type' => 'void *'
      }
    ],
    'name' => 'ap_scan_script_header_err_core'
  },
  {
    'return_type' => 'void',
    'args' => [
      {
        'name' => 'size',
        'type' => 'apr_ssize_t'
      },
      {
        'name' => 'r',
        'type' => 'request_rec *'
      }
    ],
    'name' => 'ap_send_size'
  },
  {
    'return_type' => 'int',
    'args' => [
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'pdoc',
        'type' => 'apr_xml_doc **'
      }
    ],
    'name' => 'ap_xml_parse_input'
  }
];


1;
