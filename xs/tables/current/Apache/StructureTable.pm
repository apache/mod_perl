package Apache::StructureTable;

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# ! WARNING: generated by Apache::ParseSource/0.02
# !          Thu Jun 14 20:28:42 2001
# !          do NOT edit, any changes will be lost !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

$Apache::StructureTable = [
  {
    'elts' => [],
    'type' => 'apr_pool_t'
  },
  {
    'elts' => [
      {
        'name' => 'data',
        'type' => 'unsigned char[16]'
      }
    ],
    'type' => 'apr_uuid_t'
  },
  {
    'elts' => [
      {
        'name' => 'link',
        'type' => '_ANON 62'
      },
      {
        'name' => 'type',
        'type' => 'const apr_bucket_type_t *'
      },
      {
        'name' => 'length',
        'type' => 'apr_off_t'
      },
      {
        'name' => 'start',
        'type' => 'apr_off_t'
      },
      {
        'name' => 'data',
        'type' => 'void *'
      }
    ],
    'type' => 'apr_bucket'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_post_config_t'
  },
  {
    'elts' => [],
    'type' => 'apr_interface_e'
  },
  {
    'elts' => [
      {
        'name' => 'tv_sec',
        'type' => '__time_t'
      },
      {
        'name' => 'tv_usec',
        'type' => '__suseconds_t'
      }
    ],
    'type' => 'apr_os_imp_time_t'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_get_suexec_identity_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_get_suexec_identity_t'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_http_method_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_http_method_t'
  },
  {
    'elts' => [
      {
        'name' => 'pool',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'pconf',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'argc',
        'type' => 'int'
      },
      {
        'name' => 'argv',
        'type' => 'const char * const *'
      },
      {
        'name' => 'short_name',
        'type' => 'const char *'
      }
    ],
    'type' => 'process_rec'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_optional_fn_retrieve_t'
  },
  {
    'elts' => [
      {
        'name' => 'dptr',
        'type' => 'char *'
      },
      {
        'name' => 'dsize',
        'type' => 'apr_size_t'
      }
    ],
    'type' => 'apr_datum_t'
  },
  {
    'elts' => [],
    'type' => 'apr_time_t'
  },
  {
    'elts' => [
      {
        'name' => 'pool',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'connection',
        'type' => 'conn_rec *'
      },
      {
        'name' => 'server',
        'type' => 'server_rec *'
      },
      {
        'name' => 'next',
        'type' => 'request_rec *'
      },
      {
        'name' => 'prev',
        'type' => 'request_rec *'
      },
      {
        'name' => 'main',
        'type' => 'request_rec *'
      },
      {
        'name' => 'the_request',
        'type' => 'char *'
      },
      {
        'name' => 'assbackwards',
        'type' => 'int'
      },
      {
        'name' => 'proxyreq',
        'type' => 'int'
      },
      {
        'name' => 'header_only',
        'type' => 'int'
      },
      {
        'name' => 'protocol',
        'type' => 'char *'
      },
      {
        'name' => 'proto_num',
        'type' => 'int'
      },
      {
        'name' => 'hostname',
        'type' => 'const char *'
      },
      {
        'name' => 'request_time',
        'type' => 'apr_time_t'
      },
      {
        'name' => 'status_line',
        'type' => 'const char *'
      },
      {
        'name' => 'status',
        'type' => 'int'
      },
      {
        'name' => 'method',
        'type' => 'const char *'
      },
      {
        'name' => 'method_number',
        'type' => 'int'
      },
      {
        'name' => 'allowed',
        'type' => 'int'
      },
      {
        'name' => 'allowed_xmethods',
        'type' => 'apr_array_header_t *'
      },
      {
        'name' => 'allowed_methods',
        'type' => 'ap_method_list_t *'
      },
      {
        'name' => 'sent_bodyct',
        'type' => 'int'
      },
      {
        'name' => 'bytes_sent',
        'type' => 'long'
      },
      {
        'name' => 'mtime',
        'type' => 'apr_time_t'
      },
      {
        'name' => 'chunked',
        'type' => 'int'
      },
      {
        'name' => 'boundary',
        'type' => 'const char *'
      },
      {
        'name' => 'range',
        'type' => 'const char *'
      },
      {
        'name' => 'clength',
        'type' => 'apr_off_t'
      },
      {
        'name' => 'remaining',
        'type' => 'apr_size_t'
      },
      {
        'name' => 'read_length',
        'type' => 'long'
      },
      {
        'name' => 'read_body',
        'type' => 'int'
      },
      {
        'name' => 'read_chunked',
        'type' => 'int'
      },
      {
        'name' => 'expecting_100',
        'type' => 'unsigned'
      },
      {
        'name' => 'headers_in',
        'type' => 'apr_table_t *'
      },
      {
        'name' => 'headers_out',
        'type' => 'apr_table_t *'
      },
      {
        'name' => 'err_headers_out',
        'type' => 'apr_table_t *'
      },
      {
        'name' => 'subprocess_env',
        'type' => 'apr_table_t *'
      },
      {
        'name' => 'notes',
        'type' => 'apr_table_t *'
      },
      {
        'name' => 'content_type',
        'type' => 'const char *'
      },
      {
        'name' => 'handler',
        'type' => 'const char *'
      },
      {
        'name' => 'content_encoding',
        'type' => 'const char *'
      },
      {
        'name' => 'content_language',
        'type' => 'const char *'
      },
      {
        'name' => 'content_languages',
        'type' => 'apr_array_header_t *'
      },
      {
        'name' => 'vlist_validator',
        'type' => 'char *'
      },
      {
        'name' => 'user',
        'type' => 'char *'
      },
      {
        'name' => 'ap_auth_type',
        'type' => 'char *'
      },
      {
        'name' => 'no_cache',
        'type' => 'int'
      },
      {
        'name' => 'no_local_copy',
        'type' => 'int'
      },
      {
        'name' => 'unparsed_uri',
        'type' => 'char *'
      },
      {
        'name' => 'uri',
        'type' => 'char *'
      },
      {
        'name' => 'filename',
        'type' => 'char *'
      },
      {
        'name' => 'path_info',
        'type' => 'char *'
      },
      {
        'name' => 'args',
        'type' => 'char *'
      },
      {
        'name' => 'finfo',
        'type' => 'apr_finfo_t'
      },
      {
        'name' => 'parsed_uri',
        'type' => 'apr_uri_components'
      },
      {
        'name' => 'per_dir_config',
        'type' => 'ap_conf_vector_t *'
      },
      {
        'name' => 'request_config',
        'type' => 'ap_conf_vector_t *'
      },
      {
        'name' => 'htaccess',
        'type' => 'const struct htaccess_result *'
      },
      {
        'name' => 'output_filters',
        'type' => 'ap_filter_t *'
      },
      {
        'name' => 'input_filters',
        'type' => 'ap_filter_t *'
      },
      {
        'name' => 'eos_sent',
        'type' => 'int'
      }
    ],
    'type' => 'request_rec'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_create_request_t'
  },
  {
    'elts' => [],
    'type' => 'apr_threadkey_t'
  },
  {
    'elts' => [],
    'type' => 'apr_uint64_t'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_open_logs_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_open_logs_t'
  },
  {
    'elts' => [],
    'type' => 'apr_readerwriter_e'
  },
  {
    'elts' => [
      {
        'name' => 'dptr',
        'type' => 'char *'
      },
      {
        'name' => 'dsize',
        'type' => 'int'
      }
    ],
    'type' => 'apr_sdbm_datum_t'
  },
  {
    'elts' => [],
    'type' => 'apr_port_t'
  },
  {
    'elts' => [],
    'type' => 'ap_conf_vector_t'
  },
  {
    'elts' => [
      {
        'name' => 'frec',
        'type' => 'ap_filter_rec_t *'
      },
      {
        'name' => 'ctx',
        'type' => 'void *'
      },
      {
        'name' => 'next',
        'type' => 'ap_filter_t *'
      },
      {
        'name' => 'r',
        'type' => 'request_rec *'
      },
      {
        'name' => 'c',
        'type' => 'conn_rec *'
      }
    ],
    'type' => 'ap_filter_t'
  },
  {
    'elts' => [],
    'type' => 'apr_uid_t'
  },
  {
    'elts' => [],
    'type' => 'apr_seek_where_t'
  },
  {
    'elts' => [],
    'type' => 'apr_read_type_e'
  },
  {
    'elts' => [],
    'type' => 'apr_off_t'
  },
  {
    'elts' => [
      {
        'name' => 'tm_sec',
        'type' => 'int'
      },
      {
        'name' => 'tm_min',
        'type' => 'int'
      },
      {
        'name' => 'tm_hour',
        'type' => 'int'
      },
      {
        'name' => 'tm_mday',
        'type' => 'int'
      },
      {
        'name' => 'tm_mon',
        'type' => 'int'
      },
      {
        'name' => 'tm_year',
        'type' => 'int'
      },
      {
        'name' => 'tm_wday',
        'type' => 'int'
      },
      {
        'name' => 'tm_yday',
        'type' => 'int'
      },
      {
        'name' => 'tm_isdst',
        'type' => 'int'
      },
      {
        'name' => 'tm_gmtoff',
        'type' => 'long int'
      },
      {
        'name' => 'tm_zone',
        'type' => '__const char *'
      }
    ],
    'type' => 'apr_os_exp_time_t'
  },
  {
    'elts' => [
      {
        'name' => 'name',
        'type' => 'const char *'
      },
      {
        'name' => 'filter_func',
        'type' => 'ap_filter_func'
      },
      {
        'name' => 'ftype',
        'type' => 'ap_filter_type'
      },
      {
        'name' => 'next',
        'type' => 'ap_filter_rec_t *'
      }
    ],
    'type' => 'ap_filter_rec_t'
  },
  {
    'elts' => [
      {
        'name' => 'dir',
        'type' => 'const char *'
      },
      {
        'name' => 'override',
        'type' => 'int'
      },
      {
        'name' => 'htaccess',
        'type' => 'ap_conf_vector_t *'
      },
      {
        'name' => 'next',
        'type' => 'const struct htaccess_result *'
      }
    ],
    'type' => 'htaccess_result'
  },
  {
    'elts' => [],
    'type' => 'ap_in_filter_func'
  },
  {
    'elts' => [],
    'type' => 'apr_os_file_t'
  },
  {
    'elts' => [
      {
        'name' => 'scheme',
        'type' => 'char *'
      },
      {
        'name' => 'hostinfo',
        'type' => 'char *'
      },
      {
        'name' => 'user',
        'type' => 'char *'
      },
      {
        'name' => 'password',
        'type' => 'char *'
      },
      {
        'name' => 'hostname',
        'type' => 'char *'
      },
      {
        'name' => 'port_str',
        'type' => 'char *'
      },
      {
        'name' => 'path',
        'type' => 'char *'
      },
      {
        'name' => 'query',
        'type' => 'char *'
      },
      {
        'name' => 'fragment',
        'type' => 'char *'
      },
      {
        'name' => 'hostent',
        'type' => 'hostent *'
      },
      {
        'name' => 'port',
        'type' => 'apr_port_t'
      },
      {
        'name' => 'is_initialized',
        'type' => 'unsigned'
      },
      {
        'name' => 'dns_looked_up',
        'type' => 'unsigned'
      },
      {
        'name' => 'dns_resolved',
        'type' => 'unsigned'
      }
    ],
    'type' => 'uri_components'
  },
  {
    'elts' => [
      {
        'name' => 'state',
        'type' => 'apr_uint32_t[4]'
      },
      {
        'name' => 'count',
        'type' => 'apr_uint32_t[2]'
      },
      {
        'name' => 'buffer',
        'type' => 'unsigned char[64]'
      },
      {
        'name' => 'xlate',
        'type' => 'apr_xlate_t *'
      }
    ],
    'type' => 'apr_md5_ctx_t'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_fixups_t'
  },
  {
    'elts' => [],
    'type' => 'apr_int64_t'
  },
  {
    'elts' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'fds',
        'type' => 'apr_file_t *[2]'
      },
      {
        'name' => 'program',
        'type' => 'char *'
      },
      {
        'name' => 'pid',
        'type' => 'apr_proc_t *'
      }
    ],
    'type' => 'piped_log'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_error_log_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_error_log_t'
  },
  {
    'elts' => [],
    'type' => 'apr_cmdtype_e'
  },
  {
    'elts' => [
      {
        'name' => 'key',
        'type' => 'char *'
      },
      {
        'name' => 'val',
        'type' => 'char *'
      }
    ],
    'type' => 'apr_table_entry_t'
  },
  {
    'elts' => [],
    'type' => 'apr_thread_start_t'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_auth_checker_t'
  },
  {
    'elts' => [
      {
        'name' => 'next',
        'type' => 'server_addr_rec *'
      },
      {
        'name' => 'host_addr',
        'type' => 'apr_sockaddr_t *'
      },
      {
        'name' => 'host_port',
        'type' => 'apr_port_t'
      },
      {
        'name' => 'virthost',
        'type' => 'char *'
      }
    ],
    'type' => 'server_addr_rec'
  },
  {
    'elts' => [
      {
        'name' => 's_value',
        'type' => 'const char *'
      },
      {
        'name' => 'i_value',
        'type' => 'long'
      },
      {
        'name' => 'h_value',
        'type' => 'apr_hash_t *'
      }
    ],
    'type' => 'ap_mgmt_value'
  },
  {
    'elts' => [
      {
        'name' => 'a',
        'type' => 'apr_array_header_t'
      }
    ],
    'type' => 'apr_table_t'
  },
  {
    'elts' => [
      {
        'name' => 'refcount',
        'type' => 'int'
      }
    ],
    'type' => 'apr_bucket_refcount'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_child_init_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_child_init_t'
  },
  {
    'elts' => [],
    'type' => 'apr_file_t'
  },
  {
    'elts' => [
      {
        'name' => 'name',
        'type' => 'const char *'
      },
      {
        'name' => 'ns',
        'type' => 'int'
      },
      {
        'name' => 'lang',
        'type' => 'const char *'
      },
      {
        'name' => 'first_cdata',
        'type' => 'apr_text_header'
      },
      {
        'name' => 'following_cdata',
        'type' => 'apr_text_header'
      },
      {
        'name' => 'parent',
        'type' => 'apr_xml_elem *'
      },
      {
        'name' => 'next',
        'type' => 'apr_xml_elem *'
      },
      {
        'name' => 'first_child',
        'type' => 'apr_xml_elem *'
      },
      {
        'name' => 'attr',
        'type' => 'apr_xml_attr *'
      },
      {
        'name' => 'last_child',
        'type' => 'apr_xml_elem *'
      },
      {
        'name' => 'ns_scope',
        'type' => 'apr_xml_ns_scope *'
      },
      {
        'name' => 'priv',
        'type' => 'void *'
      }
    ],
    'type' => 'apr_xml_elem'
  },
  {
    'elts' => [
      {
        'name' => 'getch',
        'type' => 'int(*) (void *param)'
      },
      {
        'name' => 'getstr',
        'type' => 'void *(*) (void *buf, size_t bufsiz, void *param)'
      },
      {
        'name' => 'close',
        'type' => 'int(*) (void *param)'
      },
      {
        'name' => 'param',
        'type' => 'void *'
      },
      {
        'name' => 'name',
        'type' => 'const char *'
      },
      {
        'name' => 'line_number',
        'type' => 'unsigned'
      }
    ],
    'type' => 'ap_configfile_t'
  },
  {
    'elts' => [
      {
        'name' => 'name',
        'type' => 'const char *'
      },
      {
        'name' => 'func',
        'type' => 'cmd_func'
      },
      {
        'name' => 'cmd_data',
        'type' => 'void *'
      },
      {
        'name' => 'req_override',
        'type' => 'int'
      },
      {
        'name' => 'args_how',
        'type' => 'enum cmd_how'
      },
      {
        'name' => 'errmsg',
        'type' => 'const char *'
      }
    ],
    'type' => 'command_rec'
  },
  {
    'elts' => [
      {
        'name' => 'os_sock',
        'type' => 'apr_os_sock_t *'
      },
      {
        'name' => 'local',
        'type' => 'sockaddr *'
      },
      {
        'name' => 'remote',
        'type' => 'sockaddr *'
      },
      {
        'name' => 'family',
        'type' => 'int'
      },
      {
        'name' => 'type',
        'type' => 'int'
      }
    ],
    'type' => 'apr_os_sock_info_t'
  },
  {
    'elts' => [
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'elt_size',
        'type' => 'int'
      },
      {
        'name' => 'nelts',
        'type' => 'int'
      },
      {
        'name' => 'nalloc',
        'type' => 'int'
      },
      {
        'name' => 'elts',
        'type' => 'char *'
      }
    ],
    'type' => 'apr_array_header_t'
  },
  {
    'elts' => [],
    'type' => 'apr_sigfunc_t'
  },
  {
    'elts' => [
      {
        'name' => 'curpos',
        'type' => 'char *'
      },
      {
        'name' => 'endpos',
        'type' => 'char *'
      }
    ],
    'type' => 'apr_vformatter_buff_t'
  },
  {
    'elts' => [],
    'type' => 'apr_status_t'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_type_checker_t'
  },
  {
    'elts' => [
      {
        'name' => 'refcount',
        'type' => 'apr_bucket_refcount'
      },
      {
        'name' => 'fd',
        'type' => 'apr_file_t *'
      }
    ],
    'type' => 'apr_bucket_file'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_get_suexec_identity_t'
  },
  {
    'elts' => [
      {
        'name' => 'root',
        'type' => 'apr_xml_elem *'
      },
      {
        'name' => 'namespaces',
        'type' => 'apr_array_header_t *'
      }
    ],
    'type' => 'apr_xml_doc'
  },
  {
    'elts' => [
      {
        'name' => 'pool',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'base_server',
        'type' => 'server_rec *'
      },
      {
        'name' => 'vhost_lookup_data',
        'type' => 'void *'
      },
      {
        'name' => 'client_socket',
        'type' => 'apr_socket_t *'
      },
      {
        'name' => 'local_addr',
        'type' => 'apr_sockaddr_t *'
      },
      {
        'name' => 'remote_addr',
        'type' => 'apr_sockaddr_t *'
      },
      {
        'name' => 'remote_ip',
        'type' => 'char *'
      },
      {
        'name' => 'remote_host',
        'type' => 'char *'
      },
      {
        'name' => 'remote_logname',
        'type' => 'char *'
      },
      {
        'name' => 'aborted',
        'type' => 'unsigned'
      },
      {
        'name' => 'keepalive',
        'type' => 'signed int'
      },
      {
        'name' => 'double_reverse',
        'type' => 'signed int'
      },
      {
        'name' => 'keepalives',
        'type' => 'int'
      },
      {
        'name' => 'local_ip',
        'type' => 'char *'
      },
      {
        'name' => 'local_host',
        'type' => 'char *'
      },
      {
        'name' => 'id',
        'type' => 'long'
      },
      {
        'name' => 'conn_config',
        'type' => 'ap_conf_vector_t *'
      },
      {
        'name' => 'notes',
        'type' => 'apr_table_t *'
      },
      {
        'name' => 'input_filters',
        'type' => 'ap_filter_t *'
      },
      {
        'name' => 'output_filters',
        'type' => 'ap_filter_t *'
      }
    ],
    'type' => 'conn_rec'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_pre_config_t'
  },
  {
    'elts' => [],
    'type' => 'apr_ino_t'
  },
  {
    'elts' => [
      {
        'name' => 'method_mask',
        'type' => 'int'
      },
      {
        'name' => 'method_list',
        'type' => 'apr_array_header_t *'
      }
    ],
    'type' => 'ap_method_list_t'
  },
  {
    'elts' => [
      {
        'name' => 'uid',
        'type' => 'uid_t'
      },
      {
        'name' => 'gid',
        'type' => 'gid_t'
      }
    ],
    'type' => 'ap_unix_identity_t'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_translate_name_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_translate_name_t'
  },
  {
    'elts' => [
      {
        'name' => 'cntxt',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'mm',
        'type' => 'void *'
      },
      {
        'name' => 'size',
        'type' => 'apr_off_t'
      }
    ],
    'type' => 'apr_mmap_t'
  },
  {
    'elts' => [],
    'type' => 'apr_threadattr_t'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_check_user_id_t'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_get_mgmt_items_t'
  },
  {
    'elts' => [],
    'type' => 'apr_uint16_t'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_log_transaction_t'
  },
  {
    'elts' => [],
    'type' => 'apr_socket_t'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_translate_name_t'
  },
  {
    'elts' => [],
    'type' => 'apr_brigade_flush'
  },
  {
    'elts' => [],
    'type' => 'apr_int32_t'
  },
  {
    'elts' => [
      {
        'name' => 'user_name',
        'type' => 'const char *'
      },
      {
        'name' => 'user_id',
        'type' => 'uid_t'
      },
      {
        'name' => 'group_id',
        'type' => 'gid_t'
      },
      {
        'name' => 'suexec_enabled',
        'type' => 'int'
      }
    ],
    'type' => 'unixd_config_rec'
  },
  {
    'elts' => [],
    'type' => 'apr_xml_parser'
  },
  {
    'elts' => [],
    'type' => 'apr_os_proc_t'
  },
  {
    'elts' => [
      {
        'name' => 'description',
        'type' => 'const char *'
      },
      {
        'name' => 'name',
        'type' => 'const char *'
      },
      {
        'name' => 'vtype',
        'type' => 'ap_mgmt_type_e'
      },
      {
        'name' => 'v',
        'type' => 'ap_mgmt_value'
      }
    ],
    'type' => 'ap_mgmt_item_t'
  },
  {
    'elts' => [],
    'type' => 'apr_interval_time_t'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_create_request_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_create_request_t'
  },
  {
    'elts' => [
      {
        'name' => 'parent_mem_sys',
        'type' => 'apr_sms_t *'
      },
      {
        'name' => 'child_mem_sys',
        'type' => 'apr_sms_t *'
      },
      {
        'name' => 'sibling_mem_sys',
        'type' => 'apr_sms_t *'
      },
      {
        'name' => 'ref_mem_sys',
        'type' => 'apr_sms_t **'
      },
      {
        'name' => 'accounting_mem_sys',
        'type' => 'apr_sms_t *'
      },
      {
        'name' => 'cleanups',
        'type' => 'apr_sms_cleanup *'
      },
      {
        'name' => 'malloc_fn',
        'type' => 'void *(*)(apr_sms_t *mem_sys, apr_size_t size)'
      },
      {
        'name' => 'calloc_fn',
        'type' => 'void *(*)(apr_sms_t *mem_sys, apr_size_t size)'
      },
      {
        'name' => 'realloc_fn',
        'type' => 'void *(*)(apr_sms_t *mem_sys, void *memory,
                       apr_size_t size)'
      },
      {
        'name' => 'free_fn',
        'type' => 'apr_status_t(*)(apr_sms_t *mem_sys, void *memory)'
      },
      {
        'name' => 'reset_fn',
        'type' => 'apr_status_t(*)(apr_sms_t *mem_sys)'
      },
      {
        'name' => 'pre_destroy_fn',
        'type' => 'void(*)(apr_sms_t *mem_sys)'
      },
      {
        'name' => 'destroy_fn',
        'type' => 'apr_status_t(*)(apr_sms_t *mem_sys)'
      },
      {
        'name' => 'threadsafe_lock_fn',
        'type' => 'void(*)(apr_sms_t *mem_sys)'
      },
      {
        'name' => 'threadsafe_unlock_fn',
        'type' => 'void(*)(apr_sms_t *mem_sys)'
      }
    ],
    'type' => 'apr_sms_t'
  },
  {
    'elts' => [
      {
        'name' => 'process',
        'type' => 'process_rec *'
      },
      {
        'name' => 'next',
        'type' => 'server_rec *'
      },
      {
        'name' => 'defn_name',
        'type' => 'const char *'
      },
      {
        'name' => 'defn_line_number',
        'type' => 'unsigned'
      },
      {
        'name' => 'server_admin',
        'type' => 'char *'
      },
      {
        'name' => 'server_hostname',
        'type' => 'char *'
      },
      {
        'name' => 'port',
        'type' => 'apr_port_t'
      },
      {
        'name' => 'error_fname',
        'type' => 'char *'
      },
      {
        'name' => 'error_log',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'loglevel',
        'type' => 'int'
      },
      {
        'name' => 'is_virtual',
        'type' => 'int'
      },
      {
        'name' => 'module_config',
        'type' => 'ap_conf_vector_t *'
      },
      {
        'name' => 'lookup_defaults',
        'type' => 'ap_conf_vector_t *'
      },
      {
        'name' => 'addrs',
        'type' => 'server_addr_rec *'
      },
      {
        'name' => 'timeout',
        'type' => 'int'
      },
      {
        'name' => 'keep_alive_timeout',
        'type' => 'int'
      },
      {
        'name' => 'keep_alive_max',
        'type' => 'int'
      },
      {
        'name' => 'keep_alive',
        'type' => 'int'
      },
      {
        'name' => 'path',
        'type' => 'const char *'
      },
      {
        'name' => 'pathlen',
        'type' => 'int'
      },
      {
        'name' => 'names',
        'type' => 'apr_array_header_t *'
      },
      {
        'name' => 'wild_names',
        'type' => 'apr_array_header_t *'
      },
      {
        'name' => 'limit_req_line',
        'type' => 'int'
      },
      {
        'name' => 'limit_req_fieldsize',
        'type' => 'int'
      },
      {
        'name' => 'limit_req_fields',
        'type' => 'int'
      }
    ],
    'type' => 'server_rec'
  },
  {
    'elts' => [],
    'type' => 'apr_other_child_rec_t'
  },
  {
    'elts' => [],
    'type' => 'apr_ssize_t'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_pre_config_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_pre_config_t'
  },
  {
    'elts' => [
      {
        'name' => 'name',
        'type' => 'const char *'
      },
      {
        'name' => 'optch',
        'type' => 'int'
      },
      {
        'name' => 'has_arg',
        'type' => 'int'
      }
    ],
    'type' => 'apr_getopt_option_t'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_type_checker_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_type_checker_t'
  },
  {
    'elts' => [],
    'type' => 'ap_out_filter_func'
  },
  {
    'elts' => [
      {
        'name' => 'scheme',
        'type' => 'char *'
      },
      {
        'name' => 'hostinfo',
        'type' => 'char *'
      },
      {
        'name' => 'user',
        'type' => 'char *'
      },
      {
        'name' => 'password',
        'type' => 'char *'
      },
      {
        'name' => 'hostname',
        'type' => 'char *'
      },
      {
        'name' => 'port_str',
        'type' => 'char *'
      },
      {
        'name' => 'path',
        'type' => 'char *'
      },
      {
        'name' => 'query',
        'type' => 'char *'
      },
      {
        'name' => 'fragment',
        'type' => 'char *'
      },
      {
        'name' => 'hostent',
        'type' => 'hostent *'
      },
      {
        'name' => 'port',
        'type' => 'apr_port_t'
      },
      {
        'name' => 'is_initialized',
        'type' => 'unsigned'
      },
      {
        'name' => 'dns_looked_up',
        'type' => 'unsigned'
      },
      {
        'name' => 'dns_resolved',
        'type' => 'unsigned'
      }
    ],
    'type' => 'apr_uri_components'
  },
  {
    'elts' => [],
    'type' => 'apr_signum_t'
  },
  {
    'elts' => [
      {
        'name' => 'out_func',
        'type' => 'ap_out_filter_func'
      },
      {
        'name' => 'in_func',
        'type' => 'ap_in_filter_func'
      }
    ],
    'type' => 'ap_filter_func'
  },
  {
    'elts' => [],
    'type' => 'ap_scoreboard_e'
  },
  {
    'elts' => [
      {
        'name' => 'crossproc',
        'type' => 'int'
      },
      {
        'name' => 'intraproc',
        'type' => 'pthread_mutex_t *'
      }
    ],
    'type' => 'apr_os_lock_t'
  },
  {
    'elts' => [],
    'type' => 'apr_pollfd_t'
  },
  {
    'elts' => [],
    'type' => 'ap_mgmt_type_e'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_child_init_t'
  },
  {
    'elts' => [
      {
        'name' => 'pid',
        'type' => 'pid_t'
      },
      {
        'name' => 'in',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'out',
        'type' => 'apr_file_t *'
      },
      {
        'name' => 'err',
        'type' => 'apr_file_t *'
      }
    ],
    'type' => 'apr_proc_t'
  },
  {
    'elts' => [],
    'type' => 'ap_generation_t'
  },
  {
    'elts' => [
      {
        'name' => 'refcount',
        'type' => 'apr_bucket_refcount'
      },
      {
        'name' => 'base',
        'type' => 'char *'
      },
      {
        'name' => 'alloc_len',
        'type' => 'apr_size_t'
      }
    ],
    'type' => 'apr_bucket_heap'
  },
  {
    'elts' => [],
    'type' => 'ap_filter_type'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_pre_connection_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_pre_connection_t'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_default_port_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_default_port_t'
  },
  {
    'elts' => [],
    'type' => 'apr_dbm_t'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_process_connection_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_process_connection_t'
  },
  {
    'elts' => [
      {
        'name' => 'directive',
        'type' => 'const char *'
      },
      {
        'name' => 'args',
        'type' => 'const char *'
      },
      {
        'name' => 'next',
        'type' => 'ap_directive_t *'
      },
      {
        'name' => 'first_child',
        'type' => 'ap_directive_t *'
      },
      {
        'name' => 'parent',
        'type' => 'ap_directive_t *'
      },
      {
        'name' => 'data',
        'type' => 'void *'
      },
      {
        'name' => 'filename',
        'type' => 'const char *'
      },
      {
        'name' => 'line_num',
        'type' => 'int'
      }
    ],
    'type' => 'ap_directive_t'
  },
  {
    'elts' => [
      {
        'name' => 'refcount',
        'type' => 'apr_bucket_refcount'
      },
      {
        'name' => 'mmap',
        'type' => 'apr_mmap_t *'
      }
    ],
    'type' => 'apr_bucket_mmap'
  },
  {
    'elts' => [],
    'type' => 'apr_byte_t'
  },
  {
    'elts' => [],
    'type' => 'apr_gid_t'
  },
  {
    'elts' => [],
    'type' => 'ap_input_mode_t'
  },
  {
    'elts' => [
      {
        'name' => 'first',
        'type' => 'apr_text *'
      },
      {
        'name' => 'last',
        'type' => 'apr_text *'
      }
    ],
    'type' => 'apr_text_header'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_header_parser_t'
  },
  {
    'elts' => [
      {
        'name' => 'cntxt',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'valid',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'protection',
        'type' => 'apr_fileperms_t'
      },
      {
        'name' => 'filetype',
        'type' => 'apr_filetype_e'
      },
      {
        'name' => 'user',
        'type' => 'apr_uid_t'
      },
      {
        'name' => 'group',
        'type' => 'apr_gid_t'
      },
      {
        'name' => 'inode',
        'type' => 'apr_ino_t'
      },
      {
        'name' => 'device',
        'type' => 'apr_dev_t'
      },
      {
        'name' => 'nlink',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'size',
        'type' => 'apr_off_t'
      },
      {
        'name' => 'csize',
        'type' => 'apr_off_t'
      },
      {
        'name' => 'atime',
        'type' => 'apr_time_t'
      },
      {
        'name' => 'mtime',
        'type' => 'apr_time_t'
      },
      {
        'name' => 'ctime',
        'type' => 'apr_time_t'
      },
      {
        'name' => 'fname',
        'type' => 'const char *'
      },
      {
        'name' => 'name',
        'type' => 'const char *'
      },
      {
        'name' => 'filehand',
        'type' => 'apr_file_t *'
      }
    ],
    'type' => 'apr_finfo_t'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_insert_filter_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_insert_filter_t'
  },
  {
    'elts' => [
      {
        'name' => 'digest',
        'type' => 'apr_uint32_t[5]'
      },
      {
        'name' => 'count_lo',
        'type' => 'apr_uint32_t'
      },
      {
        'name' => 'count_hi',
        'type' => 'apr_uint32_t'
      },
      {
        'name' => 'data',
        'type' => 'apr_uint32_t[16]'
      },
      {
        'name' => 'local',
        'type' => 'int'
      }
    ],
    'type' => 'apr_sha1_ctx_t'
  },
  {
    'elts' => [
      {
        'name' => 'tm_usec',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'tm_sec',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'tm_min',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'tm_hour',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'tm_mday',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'tm_mon',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'tm_year',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'tm_wday',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'tm_yday',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'tm_isdst',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'tm_gmtoff',
        'type' => 'apr_int32_t'
      }
    ],
    'type' => 'apr_exploded_time_t'
  },
  {
    'elts' => [],
    'type' => 'apr_short_interval_time_t'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_handler_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_handler_t'
  },
  {
    'elts' => [
      {
        'name' => 'name',
        'type' => 'const char *'
      },
      {
        'name' => 'ns',
        'type' => 'int'
      },
      {
        'name' => 'value',
        'type' => 'const char *'
      },
      {
        'name' => 'next',
        'type' => 'apr_xml_attr *'
      }
    ],
    'type' => 'apr_xml_attr'
  },
  {
    'elts' => [],
    'type' => 'apr_os_threadkey_t'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_pre_connection_t'
  },
  {
    'elts' => [],
    'type' => 'apr_filetype_e'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_access_checker_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_access_checker_t'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_auth_checker_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_auth_checker_t'
  },
  {
    'elts' => [],
    'type' => 'apr_fileperms_t'
  },
  {
    'elts' => [
      {
        'name' => 'family',
        'type' => 'int'
      },
      {
        'name' => 'sub',
        'type' => 'apr_uint32_t[4]'
      },
      {
        'name' => 'mask',
        'type' => 'apr_uint32_t[4]'
      }
    ],
    'type' => 'apr_ipsubnet_t'
  },
  {
    'elts' => [],
    'type' => 'apr_shmem_t'
  },
  {
    'elts' => [],
    'type' => 'apr_shutdown_how_e'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_log_transaction_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_log_transaction_t'
  },
  {
    'elts' => [
      {
        'name' => 'heap',
        'type' => 'apr_bucket_heap'
      },
      {
        'name' => 'base',
        'type' => 'const char *'
      },
      {
        'name' => 'pool',
        'type' => 'apr_pool_t *'
      }
    ],
    'type' => 'apr_bucket_pool'
  },
  {
    'elts' => [],
    'type' => 'apr_shm_name_t'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_post_config_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_post_config_t'
  },
  {
    'elts' => [],
    'type' => 'apr_procattr_t'
  },
  {
    'elts' => [],
    'type' => 'apr_size_t'
  },
  {
    'elts' => [],
    'type' => 'apr_thread_t'
  },
  {
    'elts' => [],
    'type' => 'apr_dir_t'
  },
  {
    'elts' => [
      {
        'name' => 'cont',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'err',
        'type' => 'int'
      },
      {
        'name' => 'ind',
        'type' => 'int'
      },
      {
        'name' => 'opt',
        'type' => 'int'
      },
      {
        'name' => 'reset',
        'type' => 'int'
      },
      {
        'name' => 'argc',
        'type' => 'int'
      },
      {
        'name' => 'argv',
        'type' => 'const char **'
      },
      {
        'name' => 'place',
        'type' => 'char const *'
      },
      {
        'name' => 'interleave',
        'type' => 'int'
      },
      {
        'name' => 'skip_start',
        'type' => 'int'
      },
      {
        'name' => 'skip_end',
        'type' => 'int'
      }
    ],
    'type' => 'apr_getopt_t'
  },
  {
    'elts' => [
      {
        'name' => 'headers',
        'type' => 'iovec *'
      },
      {
        'name' => 'numheaders',
        'type' => 'int'
      },
      {
        'name' => 'trailers',
        'type' => 'iovec *'
      },
      {
        'name' => 'numtrailers',
        'type' => 'int'
      }
    ],
    'type' => 'apr_hdtr_t'
  },
  {
    'elts' => [],
    'type' => 'apr_os_dir_t'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_default_port_t'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_http_method_t'
  },
  {
    'elts' => [],
    'type' => 'apr_os_sock_t'
  },
  {
    'elts' => [],
    'type' => 'cmd_func'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_post_read_request_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_post_read_request_t'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_process_connection_t'
  },
  {
    'elts' => [],
    'type' => 'apr_dev_t'
  },
  {
    'elts' => [
      {
        'name' => 'name',
        'type' => 'const char *'
      },
      {
        'name' => 'num_func',
        'type' => 'int'
      },
      {
        'name' => 'destroy',
        'type' => 'void(*)(void *data)'
      },
      {
        'name' => 'read',
        'type' => 'apr_status_t(*)(apr_bucket *b, const char **str, apr_size_t *len, apr_read_type_e block)'
      },
      {
        'name' => 'setaside',
        'type' => 'apr_status_t(*)(apr_bucket *e, apr_pool_t *pool)'
      },
      {
        'name' => 'split',
        'type' => 'apr_status_t(*)(apr_bucket *e, apr_off_t point)'
      },
      {
        'name' => 'copy',
        'type' => 'apr_status_t(*)(apr_bucket *e, apr_bucket **c)'
      }
    ],
    'type' => 'apr_bucket_type_t'
  },
  {
    'elts' => [],
    'type' => 'apr_wait_how_e'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_post_read_request_t'
  },
  {
    'elts' => [],
    'type' => 'apr_int16_t'
  },
  {
    'elts' => [
      {
        'name' => 'text',
        'type' => 'const char *'
      },
      {
        'name' => 'next',
        'type' => 'apr_text *'
      }
    ],
    'type' => 'apr_text'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_header_parser_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_header_parser_t'
  },
  {
    'elts' => [],
    'type' => 'apr_dso_handle_t'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_get_mgmt_items_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_get_mgmt_items_t'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_insert_filter_t'
  },
  {
    'elts' => [],
    'type' => 'apr_lock_t'
  },
  {
    'elts' => [],
    'type' => 'apr_os_dso_handle_t'
  },
  {
    'elts' => [],
    'type' => 'apr_dso_handle_sym_t'
  },
  {
    'elts' => [],
    'type' => 'apr_sdbm_t'
  },
  {
    'elts' => [],
    'type' => 'apr_socklen_t'
  },
  {
    'elts' => [
      {
        'name' => 's_addr',
        'type' => 'in_addr_t'
      }
    ],
    'type' => 'apr_in_addr_t'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_optional_fn_retrieve_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_optional_fn_retrieve_t'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_fixups_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_fixups_t'
  },
  {
    'elts' => [],
    'type' => 'apr_locktype_e'
  },
  {
    'elts' => [],
    'type' => 'apr_abortfunc_t'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_access_checker_t'
  },
  {
    'elts' => [
      {
        'name' => 'p',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'list',
        'type' => 'apr_bucket_list'
      }
    ],
    'type' => 'apr_bucket_brigade'
  },
  {
    'elts' => [],
    'type' => 'apr_os_thread_t'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_error_log_t'
  },
  {
    'elts' => [
      {
        'name' => 'version',
        'type' => 'int'
      },
      {
        'name' => 'minor_version',
        'type' => 'int'
      },
      {
        'name' => 'module_index',
        'type' => 'int'
      },
      {
        'name' => 'name',
        'type' => 'const char *'
      },
      {
        'name' => 'dynamic_load_handle',
        'type' => 'void *'
      },
      {
        'name' => 'next',
        'type' => 'module_struct *'
      },
      {
        'name' => 'magic',
        'type' => 'unsigned long'
      },
      {
        'name' => 'rewrite_args',
        'type' => 'void(*) (process_rec *process)'
      },
      {
        'name' => 'create_dir_config',
        'type' => 'void *(*) (apr_pool_t *p, char *dir)'
      },
      {
        'name' => 'merge_dir_config',
        'type' => 'void *(*) (apr_pool_t *p, void *base_conf, void *new_conf)'
      },
      {
        'name' => 'create_server_config',
        'type' => 'void *(*) (apr_pool_t *p, server_rec *s)'
      },
      {
        'name' => 'merge_server_config',
        'type' => 'void *(*) (apr_pool_t *p, void *base_conf, void *new_conf)'
      },
      {
        'name' => 'cmds',
        'type' => 'const command_rec *'
      },
      {
        'name' => 'register_hooks',
        'type' => 'void(*) (apr_pool_t *p)'
      }
    ],
    'type' => 'module'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_handler_t'
  },
  {
    'elts' => [
      {
        'name' => 'pool',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'hostname',
        'type' => 'char *'
      },
      {
        'name' => 'servname',
        'type' => 'char *'
      },
      {
        'name' => 'port',
        'type' => 'apr_port_t'
      },
      {
        'name' => 'family',
        'type' => 'apr_int32_t'
      },
      {
        'name' => 'sa',
        'type' => 'union _ANON 1'
      },
      {
        'name' => 'salen',
        'type' => 'apr_socklen_t'
      },
      {
        'name' => 'ipaddr_len',
        'type' => 'int'
      },
      {
        'name' => 'addr_str_len',
        'type' => 'int'
      },
      {
        'name' => 'ipaddr_ptr',
        'type' => 'void *'
      },
      {
        'name' => 'next',
        'type' => 'apr_sockaddr_t *'
      }
    ],
    'type' => 'apr_sockaddr_t'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_quick_handler_t'
  },
  {
    'elts' => [],
    'type' => 'apr_hash_t'
  },
  {
    'elts' => [
      {
        'name' => 'info',
        'type' => 'void *'
      },
      {
        'name' => 'override',
        'type' => 'int'
      },
      {
        'name' => 'limited',
        'type' => 'int'
      },
      {
        'name' => 'limited_xmethods',
        'type' => 'apr_array_header_t *'
      },
      {
        'name' => 'xlimited',
        'type' => 'ap_method_list_t *'
      },
      {
        'name' => 'config_file',
        'type' => 'ap_configfile_t *'
      },
      {
        'name' => 'directive',
        'type' => 'ap_directive_t *'
      },
      {
        'name' => 'pool',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'temp_pool',
        'type' => 'apr_pool_t *'
      },
      {
        'name' => 'server',
        'type' => 'server_rec *'
      },
      {
        'name' => 'path',
        'type' => 'char *'
      },
      {
        'name' => 'cmd',
        'type' => 'const command_rec *'
      },
      {
        'name' => 'context',
        'type' => 'ap_conf_vector_t *'
      },
      {
        'name' => 'err_directive',
        'type' => 'const ap_directive_t *'
      }
    ],
    'type' => 'cmd_parms'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_quick_handler_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_quick_handler_t'
  },
  {
    'elts' => [
      {
        'name' => 'pFunc',
        'type' => 'ap_HOOK_check_user_id_t *'
      },
      {
        'name' => 'szName',
        'type' => 'const char *'
      },
      {
        'name' => 'aszPredecessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'aszSuccessors',
        'type' => 'const char * const *'
      },
      {
        'name' => 'nOrder',
        'type' => 'int'
      }
    ],
    'type' => 'ap_LINK_check_user_id_t'
  },
  {
    'elts' => [
      {
        'name' => 'state',
        'type' => 'apr_uint32_t[4]'
      },
      {
        'name' => 'count',
        'type' => 'apr_uint32_t[2]'
      },
      {
        'name' => 'buffer',
        'type' => 'unsigned char[64]'
      },
      {
        'name' => 'xlate',
        'type' => 'apr_xlate_t *'
      }
    ],
    'type' => 'apr_md4_ctx_t'
  },
  {
    'elts' => [],
    'type' => 'apr_xlate_t'
  },
  {
    'elts' => [],
    'type' => 'apr_hash_index_t'
  },
  {
    'elts' => [],
    'type' => 'apr_lockscope_e'
  },
  {
    'elts' => [
      {
        'name' => 'status',
        'type' => 'int'
      },
      {
        'name' => 'data',
        'type' => 'const char *'
      }
    ],
    'type' => 'ap_bucket_error'
  },
  {
    'elts' => [],
    'type' => 'ap_HOOK_open_logs_t'
  },
  {
    'elts' => [],
    'type' => 'apr_uint32_t'
  }
];


1;
