mod_perl 2.0 STATUS:                                       -*-text-*-
   Last modified at [$Date: 2003/03/05 07:35:40 $]

Release:
--------

   1.99_08    : Released Jan 10, 2003
   1.99_07    : Released Sep 27, 2002
   1.99_06    : Not released
   1.99_05    : Released Aug 20, 2002
   1.99_04    : Released Jun 21, 2002
   1.99_03    : Released Jun 16, 2002
   1.99_02    : Released Jun 01, 2002
   1.99_01    : Released Apr 06, 2002


   ====================================================
   === We are still using the todo/ directory to    ===
   === track some status; please look there too ... ===
   ====================================================



Release Showstoppers:
---------------------

Available Patches:
------------------

* Fixing Apache->warn("foo")

  Report: http://mathforum.org/epigone/modperl-dev/noxtramcay/3D11A4E5.6010202@stason.org
  Thread: http://mathforum.org/epigone/modperl-dev/noxtramcay
  Status: pending Apache::Log compat issues, this and other methods
          might be dropped.
----

* The Apache::Scoreboard XS implemenation with tests is awaiting to be
  committed

  Report: http://mathforum.org/epigone/modperl-dev/zehporbreh/Pine.LNX.4.44.0204062240010.11967-100000@hope.stason.org
  Status: waiting for Doug's review

----

* 
  Report: 
  Status: 

Needs Patch or Further Investigation:
-------------------------------------

* Looks like there is an issue with filter configuration, I've noticed that:

   PerlInputFilterHandler MyApache::InputFilterGET2HEAD

  silently ignores the filter, whereas:

   PerlInputFilterHandler +MyApache::InputFilterGET2HEAD

  calls the filter. figure out:

  - why the loading doesn't happen
  - why the error doesn't happen (probably both connected)

* in blead-perl (where ${^TAINT} returns -1 for -t and 1 for -T, 0
  otherwise). in modperl/taint test under worker mpm ${^TAINT} returns
  -1, when it should be 1. and the test fails

   in mg.c :
        else if (strEQ(mg->mg_ptr, "\024AINT"))
            sv_setiv(sv, PL_tainting
                    ? (PL_taint_warn || PL_unsafe ? -1 : 1)
                    : 0);

  need to check whether something different happens to PL_taint_warn
  || PL_unsafe under worker mpm (it does the right thing with
  prefork).

* 'SetHandler modperl' doesn't reset $|, so if anything turns it on
  anywhere, it's going to stay that way. Meaning excessive flushing
  probably causing a performance hit. I've tried to add the code to
  reset it, but this requires getting a perl interpreter at the early
  stage and it breaks several filter tests, which has relied before on
  the coincidence that both the response handler and the filter were
  run by the same interpreter (in particular this breaks the code
  where push_handlers() uses a string as a handler, rather a CODE
  reference, see t/filter/TestFilter/both_str_rec_add.pm, to
  reproduce the problem, simply s/modperl/perl-script/)

* child processes never run END blocks. a good example is
  Apache::TestUtil, which doesn't cleanup files and dirs it has
  created, because the END block is not run.

* Currently modperl_filter_add_{connection|request} check the filter
  handler function attrs before accepting the filter. If the module
  wasn't preloaded the check fails and filter handler is skipped. We
  could have this issue documented (which is OK, but might raise too
  many questions), but we could also always preload the filter
  handlers. To test see TestFilter::input_msg

* we still have a problem with mod_perl starting from a
  vhost. consider the following config:

  PerlSwitches -I/foo/bar
  <VirtualHost TestDirective::perlloadmodule6>
     PerlLoadModule TestDirective::perlloadmodule6
     ...
  </VirtualHost>

  The value set by PerlSwitches in the main server is ignored, because
  it's not seen by mod_perl starting from vhost.
  
  overall, currently the early startup in vhost is a bunch of ugly
  workaround, which I've added everytime I came up with a config that
  wasn't working. Need to come up with a better design decisions.

  once this is fixed. I want the perlloadmodule6 to be loaded before
  all other perlloadmodule configs, because it tests an important
  segfault when perlloadmodule happens to start mod_perl from within a
  vhost. but because PerlSwitches from other tests are ignored, it
  can't trigger the mod_perl startup in the test suite.

* slurp_filename's C implementation.

  Status: 1.x's like patch posted: doug -1
  Dependency: Doug promised to detail how it should be different in 2.0.  
  Thread: http://marc.theaimsgroup.com/?t=100364777500004&r=1&w=2

* ModPerl::Registry END {} block woes , described in details at the
  forwarded message from Jim Schueler
  http://marc.theaimsgroup.com/?l=apache-modperl&m=103720834717981&w=2
  the whole thread is here:
  http://marc.theaimsgroup.com/?t=103713532800003&r=1&w=2

* $r->rflush doesn't work. see:
  http://marc.theaimsgroup.com/?l=apache-modperl&m=103847990813285&w=2
  I also see a weird behavior where it does sends FLUSH buckets but
  they all seem to fall through the data, thus not really flushing
  anything. this can be easily reproduced with MyApache::FilterSnoop.

* directive handlers are supported but need some work for 1.x compat
  - Apache::ModuleConfig->get needs a compat method mapping to
    Apache::Module->get_config

  - Apache::CmdParms::info for CmdParms implemented by Perl modules

  - Apache::CmdParms::{GETC,getline} needs compat mapping, similar to
    what Apache::Directive->as_string does, but one char or line at a time

* Quite a few people reported problems with TestHooks during 'make test'
  - http://marc.theaimsgroup.com/?t=102985405500008&r=1&w=2



Open Issues or Core Enhancements:
---------------------------------

* Apache::Log compat issues:

  Apache->warn, Apache::warn, Apache::Server->warn and
  Apache->Apache::Server->log_error are all doing:
     s = modperl_global_get_server_rec();
  and this function is thread safe only during the startup.

  possible solutions:

  1) enforce that these functions are used only at the server startup

  2) require +GlobalRequest, which gives us r->server, now thread
     safe (though slow).

  3) drop them all from the API and move to compat. 
     [remember that Apache::warn is needed for registry scripts to
     override warn()]

  Report: Message-ID: <Pine.LNX.4.33.0206201011070.2590-100000@mako.covalent.net>
  Status: <img alt="Doug, contemplating">

----

* we need a bug reporting utility that can be used post-install, which
  should be similar to t/REPORT

  Report: http://mathforum.org/epigone/modperl-dev/staiblirroo/3CB544D7.8040109@stason.org
  thread: http://mathforum.org/epigone/modperl-dev/staiblirroo
  Status: +1: Stas, Doug
          needs to be implemented

----

* Apache::PerlSections missing features for backwards compatibility:
 - $Apache::ReadConfig::DocumentRoot
 - Apache::PerlSections->store(filename)

  Report: Philippe M. Chiasson <gozer@cpan.org>
  Status: Philippe M. Chiasson <gozer@cpan.org> is working on it

----

* PerlPreConnectionHandler is implemented, but the 'void *csd' arg in
  the callback is ignored

  Status: no hurry

----

* 
  Report: 
  Status: 
----


Documentation:
--------------

  -- see: modperl-docs/src/docs/2.0/TODO

Patches unlikely to be applied:
-------------------------------

* 
  Report: 
  Status: 

